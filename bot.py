import sqlite3
import os
from pyrogram import Client, filters
from pyrogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# --- ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ---
# ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá
import task_1 
import task_2 
import task_3 
import task_4 
import task_5 
import task_6 
import task_7 
import task_8 
import task_9 
import task_10 
import withdraw_handlers 

# --- API ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
# API ID, API HASH ‡¶è‡¶¨‡¶Ç BOT_TOKEN ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ (.env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá) ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá
API_ID = int(os.environ.get("API_ID", 12345))
API_HASH = os.environ.get("API_HASH", "your_api_hash")
BOT_TOKEN = os.environ.get("BOT_TOKEN", "your_bot_token")

# --- Database ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
DB_NAME = 'user_data.db'
# ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ
conn = sqlite3.connect(DB_NAME, check_same_thread=False)
cursor = conn.cursor()

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø (‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá)
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance REAL DEFAULT 0.00,
    referrer_id INTEGER
)
""")
conn.commit()

# --- ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ---
# ‡¶è‡¶ü‡¶ø ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶´‡ßç‡¶≤‡ßã ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º
USER_STATE = {}

# --- ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶°‡ßá‡¶´‡¶ø‡¶®‡¶ø‡¶∂‡¶® ---
# ‡¶¨‡¶ü ‡¶Æ‡ßá‡¶®‡ßÅ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶°
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üí∞ Daily Bonus"), KeyboardButton("üîó Refer & Earn")],
        [KeyboardButton("TASK-1"), KeyboardButton("TASK-2"), KeyboardButton("TASK-3")],
        [KeyboardButton("TASK-4"), KeyboardButton("TASK-5"), KeyboardButton("TASK-6")],
        [KeyboardButton("TASK-7"), KeyboardButton("TASK-8"), KeyboardButton("TASK-9")],
        [KeyboardButton("TASK-10")],
        [KeyboardButton("WITHDRAW_NOW"), KeyboardButton("My Account")],
        [KeyboardButton("üßæ History"), KeyboardButton("Status (Admin)")]
    ],
    resize_keyboard=True
)

# --- ‡¶ï‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ---
def create_user_if_not_exists(user_id, username, referrer_id=None):
    """‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, username, balance, referrer_id) VALUES (?, ?, ?, ?)",
                       (user_id, username, 0.00, referrer_id))
        conn.commit()

# --- ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞: /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ---
@Client.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ
    referrer_id = None
    if len(message.command) > 1 and message.command[1].isdigit():
        referrer_id = int(message.command[1])
    
    create_user_if_not_exists(user_id, username, referrer_id)
    
    await message.reply_text(
        f"‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {message.from_user.first_name}!\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
        reply_markup=main_menu_keyboard
    )

# --- ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞: My Account ---
@Client.on_message(filters.regex("My Account") & filters.private)
async def my_account_handler(client: Client, message: Message):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§"""
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    balance = result[0] if result else 0.00
    
    await message.reply_text(f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**")

# --- ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞: ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ Text ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ö ‡¶ï‡¶∞‡¶æ (‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï) ---
@Client.on_message(filters.text & filters.private, group=99)
async def process_text_messages(client: Client, message: Message):
    """‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = message.from_user.id
    
    # ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶´‡ßç‡¶≤‡ßã‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá, ‡¶è‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ü‡¶ø ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
    if USER_STATE.get(user_id):
        return
        
    text = message.text.strip().lower()
    
    # ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¨‡¶æ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á
    if text not in ["/start", "withdraw_now", "my account", "history", "status (admin)", "daily bonus", "refer & earn"] and not text.startswith("task-"):
        await message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=main_menu_keyboard)


# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ---
app = Client(
    "earning_bot_session",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)


# --- ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ---
if __name__ == "__main__":
    
    # ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£: group=-1 ‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡ßã‡¶∞‡¶ø‡¶ü‡¶ø)
    # ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º
    withdraw_handlers.setup_withdraw_handlers(app, USER_STATE, group=-1) 
    
    # ‚úÖ ‡¶∏‡¶¨‡¶ï‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶æ
    # ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ 10‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ï‡ßá ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶§‡ßã‡¶≤‡ßá
    task_1.setup_task_handlers(app) 
    task_2.setup_task_handlers(app) 
    task_3.setup_task_handlers(app) 
    task_4.setup_task_handlers(app) 
    task_5.setup_task_handlers(app) 
    task_6.setup_task_handlers(app) 
    task_7.setup_task_handlers(app) 
    task_8.setup_task_handlers(app) 
    task_9.setup_task_handlers(app) 
    task_10.setup_task_handlers(app) 
    
    # ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
    app.run()
