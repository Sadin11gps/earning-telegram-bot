import os
import sqlite3
import time
from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)

# **********************************************
# **** ржХрзНрж▓рж╛ржЙржб рж╣рзЛрж╕рзНржЯрж┐ржВ-ржПрж░ ржЬржирзНржп ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ****
# **********************************************
# ржПржЗ Key ржЧрзБрж▓рзЛ Railway Variables ржерзЗржХрзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЖрж╕ржмрзЗ
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# **** ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐ (ржЖржкржирж╛рж░ Telegram ID) ****
OWNER_ID = 7702378694  
ADMIN_CONTACT_USERNAME = "rdsratul81" # ржпрзЛржЧрж╛ржпрзЛржЧрзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ржирзЗржо
# **********************************************

# **********************************************
# **** ржмржЯрзЗрж░ ржмрзНржпржмрж╕рж╛ржпрж╝рж┐ржХ рж▓ржЬрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ (ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ) ****
# **********************************************
REFER_BONUS = 30.00          # ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ 30 ржЯрж╛ржХрж╛
MIN_WITHDRAW = 1500.00       # рж╕рж░рзНржмржирж┐ржорзНржи 1500 ржЯрж╛ржХрж╛ рж╣рж▓рзЗ ржЙржЗржержбрзНрж░ ржХрж░рж╛ ржпрж╛ржмрзЗ
WITHDRAW_FEE_PERCENT = 10.0  # 10% ржЙржЗржержбрзНрж░ ржлрж┐
# **********************************************


# --- Database рж╕рзЗржЯржЖржк ---
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# ржЗржЙржЬрж╛рж░ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐/ржЖржкржбрзЗржЯ
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        task_balance REAL DEFAULT 0.00,
        referral_balance REAL DEFAULT 0.00,
        referral_count INTEGER DEFAULT 0,
        referred_by INTEGER,
        is_blocked INTEGER DEFAULT 0,
        last_bonus_time INTEGER DEFAULT 0
    )
''')

# ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржЯрзЗржмрж┐рж▓
cursor.execute('''
    CREATE TABLE IF NOT EXISTS withdraw_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        method TEXT,
        account_number TEXT,
        status TEXT DEFAULT 'Pending',
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')
conn.commit()

# --- ржХрзАржмрзЛрж░рзНржб рж╕рзЗржЯржЖржк ---

# ржорзВрж▓ ржорзЗржирзБрж░ ржмрж╛ржЯржи (Reply Keyboard) - "History" ржПржмржВ "Stats" рж╕рж╣
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("ЁЯТ░ Daily Bonus"), KeyboardButton("ЁЯФЧ Refer & Earn")],
        [KeyboardButton("ЁЯТ│ Withdraw"), KeyboardButton("ЁЯСд My Account")],
        [KeyboardButton("ЁЯз╛ History"), KeyboardButton("ЁЯСС Status (Admin)")]
    ],
    resize_keyboard=True
)

# ржЯрж╛рж╕рзНржХ ржорзЗржирзБрж░ ржмрж╛ржЯржи (Inline Keyboard)
task_menu_keyboard = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton("ЁЯПЕ TASK-1_10 TK", callback_data="task_1_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-2_10 TK", callback_data="task_2_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-3_10 TK", callback_data="task_3_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-4_10 TK", callback_data="task_4_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-5_10 TK", callback_data="task_5_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-6_10 TK", callback_data="task_6_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-7_10 TK", callback_data="task_7_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-8_10 TK", callback_data="task_8_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-9_10 TK", callback_data="task_9_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-10_10 TK", callback_data="task_10_10")
        ],
        [
            InlineKeyboardButton("ЁЯПа MAIN MENU", callback_data="main_menu")
        ]
    ]
)

# --- Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ рж╕рзЗржЯржЖржк ---
app = Client(
    "earning_bot",
    api_id=int(API_ID),
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- ржлрж╛ржВрж╢ржи: ржЗржЙржЬрж╛рж░ Database ржП ржпрзЛржЧ ржХрж░рж╛ ---
def add_user(user_id, referred_by=None):
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, referred_by) VALUES (?, ?)", (user_id, referred_by))
        conn.commit()
        if referred_by:
            # рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕ ржпрзЛржЧ ржХрж░рж╛
            cursor.execute("UPDATE users SET referral_balance = referral_balance + ?, referral_count = referral_count + 1 WHERE user_id = ?", (REFER_BONUS, referred_by))
            conn.commit()
            return True
    return False

# --- ржлрж╛ржВрж╢ржи: ржЗржЙржЬрж╛рж░ ржмрзНрж▓ржХ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ---
def is_user_blocked(user_id):
    cursor.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0] == 1
    return False

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: /start ржХржорж╛ржирзНржб ---
@app.on_message(filters.command("start"))
async def start_command(client, message):
    user_id = message.from_user.id

    if is_user_blocked(user_id):
        await message.reply_text("тЭМ ржжрзБржГржЦрж┐ржд! ржЖржкржирж╛ржХрзЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржерзЗржХрзЗ ржмрзНрж▓ржХ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        return

    referred_by = None
    
    # рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ ржерзЗржХрзЗ ржЖрж╕рж╛ ржЗржЙржЬрж╛рж░ рж╢ржирж╛ржХрзНржд ржХрж░рж╛
    if len(message.command) > 1:
        try:
            referred_by = int(message.command[1])
            if referred_by == user_id or referred_by not in [row[0] for row in cursor.execute("SELECT user_id FROM users").fetchall()]:
                referred_by = None
            else:
                add_user(user_id, referred_by)
                await client.send_message(
                    referred_by,
                    f"ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржПржХржЬржи ржирждрзБржи ржЗржЙржЬрж╛рж░ ({message.from_user.first_name}) ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХрзЗ ржЬржпрж╝рзЗржи ржХрж░рзЗржЫрзЗред ржЖржкржирж┐ {REFER_BONUS:.2f} ржЯрж╛ржХрж╛ ржмрзЛржирж╛рж╕ ржкрзЗржпрж╝рзЗржЫрзЗржи!"
                )
        except ValueError:
            referred_by = None
            
    # ржЗржЙржЬрж╛рж░ржХрзЗ Database ржП ржпрзЛржЧ ржХрж░рж╛
    if add_user(user_id, referred_by):
        text = "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"
    else:
        text = "ЁЯСЛ ржЖржмрж╛рж░ рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗ ржорзВрж▓ ржорзЗржирзБ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛред"

    await message.reply_text(
        text,
        reply_markup=main_menu_keyboard
    )


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ЁЯТ░ Daily Bonus (ржПржЦржи ржЯрж╛рж╕рзНржХ ржорзЗржирзБ ржжрзЗржЦрж╛ржмрзЗ) ---
@app.on_message(filters.regex("ЁЯТ░ Daily Bonus"))
async def daily_bonus_handler(client, message):
    if is_user_blocked(message.from_user.id): return
    
    # ржЗржЙржЬрж╛рж░ржХрзЗ ржЯрж╛рж╕рзНржХ ржорзЗржирзБ ржжрзЗржЦрж╛ржи
    await message.reply_text(
        "тЬЕ Task complete ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи.\n"
        "тЬЕ ржирж┐ржпрж╝ржо ржорзЗржирзЗ ржХрж╛ржЬ ржХрж░ржмрзЗржи ржЗржиржХрж╛ржо ржирж┐рж╢рзНржЪрж┐рждЁЯЪА",
        reply_markup=task_menu_keyboard
    )


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ЁЯФЧ Refer & Earn ---
@app.on_message(filters.regex("ЁЯФЧ Refer & Earn"))
async def refer_command(client, message):
    if is_user_blocked(message.from_user.id): return

    user_id = message.from_user.id
    referral_link = f"https://t.me/{client.me.username}?start={user_id}"
    
    text = (
        "ЁЯОЙ рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи!\n"
        "-\n"
        f"ржЖржкржирж╛рж░ ржмржирзНржзрзБржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рзБржи ржПржмржВ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржПржХржЯрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржмрзЛржирж╛рж╕ ржкрж╛ржиред\n\n"
        f"ЁЯТ╕ REFER BOUNS: **{REFER_BONUS:.2f} TK**\n"
        "-----------------------\n"
        "ЁЯМР **REFER LINK** ЁЯМР\n"
        f"ЁЯФЧ `{referral_link}`\n\n"
        "ЁЯЪА ржЙржкрж░рзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рж▓рж┐ржВржХржЯрж┐ ржХржкрж┐ ржХрж░рзЗ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржиред"
    )
    await message.reply_text(text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ЁЯСд My Account ---
@app.on_message(filters.regex("ЁЯСд My Account"))
async def account_command(client, message):
    if is_user_blocked(message.from_user.id): return

    user_id = message.from_user.id
    cursor.execute("SELECT task_balance, referral_balance, referral_count FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    if data:
        task_balance, referral_balance, ref_count = data
    else:
        # ржпржжрж┐ ржХрзЛржирзЛржнрж╛ржмрзЗ ржЗржЙржЬрж╛рж░ ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝
        task_balance, referral_balance, ref_count = 0.00, 0.00, 0
        
    total_balance = task_balance + referral_balance
    
    text = (
        "ЁЯТ╝ **ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕**\n"
        "-\n"
        f"ЁЯПЕ Task ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{task_balance:.2f} рз│**\n"
        f"ЁЯТ╕ рж░рзЗржлрж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{referral_balance:.2f} рз│**\n"
        f"ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{total_balance:.2f} рз│**\n"
        f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓: **{ref_count} ржЬржи**\n\n"
        "тЬЕ ржХржорж┐рж╢ржи ржкрзЗрждрзЗ ржЖрж░ржУ ржмрзЗрж╢рж┐ рж░рзЗржлрж╛рж░ ржХрж░рзБржи!\n"
        "тЬЕ ржирж┐ржпрж╝ржорж┐ржд рж╕ржмржЧрзБрж▓рзЛ ржЯрж╛рж╕рзНржХ ржХржоржкрзНрж▓рж┐ржЯ ржХрж░рзБржи!"
    )
    await message.reply_text(text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ЁЯТ│ Withdraw ---
@app.on_message(filters.regex("ЁЯТ│ Withdraw"))
async def withdraw_command(client, message):
    if is_user_blocked(message.from_user.id): return
    
    # ржПржЦрж╛ржирзЗ ржЙржЗржержбрзНрж░ рж▓ржЬрж┐ржХ ржпрзЛржЧ ржХрж░рждрзЗ рж╣ржмрзЗред ржмрж░рзНрждржорж╛ржирзЗ рж╢рзБржзрзБ ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржЪрзНржЫрзЗред
    await message.reply_text(
        f"тЭМ ржжрзБржГржЦрж┐ржд! ржЯрж╛ржХрж╛ рждрзЛрж▓рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ рж╕рж░рзНржмржирж┐ржорзНржи **{MIN_WITHDRAW:.2f} ржЯрж╛ржХрж╛** ржкрзНрж░ржпрж╝рзЛржЬржиред\n"
        f"ржЙрждрзНрждрзЛрж▓ржи ржлрж┐: **{WITHDRAW_FEE_PERCENT:.0f}%**ред"
    )


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ЁЯз╛ History ---
@app.on_message(filters.regex("ЁЯз╛ History"))
async def history_command(client, message):
    if is_user_blocked(message.from_user.id): return

    user_id = message.from_user.id
    cursor.execute(
        "SELECT timestamp, amount, method, account_number, status FROM withdraw_history WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10", 
        (user_id,)
    )
    history = cursor.fetchall()
    
    if not history:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return

    history_text = "ЁЯз╛ **ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐**\n\n"
    for item in history:
        timestamp, amount, method, number, status = item
        status_emoji = "тЬЕ Approved" if status == "Approved" else ("тЭМ Rejected" if status == "Rejected" else "тП│ Pending")
        
        history_text += (
            f"ЁЯУЕ {timestamp[:10]} - {timestamp[11:16]}\n"
            f"ЁЯТ░ {amount:.2f} рз│\n"
            f"ЁЯПж {method}\n"
            f"ЁЯФв {number}\n"
            f"ЁЯОи {status_emoji}\n"
            "-----------------------\n"
        )
    
    await message.reply_text(history_text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ЁЯСС Status (Admin) ---
@app.on_message(filters.regex("ЁЯСС Status \\(Admin\\)"))
async def admin_status_command(client, message):
    if is_user_blocked(message.from_user.id): return

    contact_button = InlineKeyboardMarkup(
        [[InlineKeyboardButton("ЁЯТм CONTACT", url=f"https://t.me/{ADMIN_CONTACT_USERNAME}")]]
    )
    
    text = "тЬ│я╕П ржЬрж░рзБрж░рзА ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи тЬ│я╕П"
    await message.reply_text(text, reply_markup=contact_button)


# --- ржХрзНржпрзЛржпрж╝рж╛рж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ржЯрж╛рж╕рзНржХ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ---
@app.on_callback_query(filters.regex("^task_"))
async def task_callback_handler(client, callback_query):
    # ржЯрж╛рж╕рзНржХ рж▓ржЬрж┐ржХ ржПржЦрж╛ржирзЗ ржпрзБржХрзНржд ржХрж░рж╛ рж╣ржмрзЗ
    await callback_query.answer("ржЖржкрж╛рждржд ржПржЗ ржЯрж╛рж╕рзНржХрзЗрж░ ржХрзЛржб рж╕рзЗржЯржЖржк ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред")

# --- ржХрзНржпрзЛржпрж╝рж╛рж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Main Menu ржмрж╛ржЯржи ---
@app.on_callback_query(filters.regex("^main_menu"))
async def back_to_main_menu(client, callback_query):
    # ржпржЦржи ржЗржЙржЬрж╛рж░ Inline ржмрж╛ржЯржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ Main Menu-рждрзЗ ржлрж┐рж░рждрзЗ ржЪрж╛ржпрж╝
    await callback_query.edit_message_text(
        "ЁЯСЛ ржЖржкржирж┐ ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржПрж╕рзЗржЫрзЗржиред ржирж┐ржЪрзЗ ржорзВрж▓ ржорзЗржирзБ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛ:",
        reply_markup=main_menu_keyboard
    )
    await callback_query.answer("ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржЧрзЗржЫрзЗржиред")


# --- ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: /stats ---
@app.on_message(filters.command("stats"))
async def stats_admin_command(client, message):
    if message.from_user.id != OWNER_ID: return
    
    cursor.execute("SELECT COUNT(user_id), SUM(task_balance + referral_balance) FROM users")
    total_users, total_balance = cursor.fetchone()
    
    text = (
        "ЁЯСС **ржЕрзНржпрж╛ржбржорж┐ржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕**\n"
        f"ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: **{total_users} ржЬржи**\n"
        f"ЁЯТ░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ (ржЗржЙржЬрж╛рж░ржжрзЗрж░): **{total_balance:.2f} ржЯрж╛ржХрж╛**"
    )
    await message.reply_text(text)


# --- ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб: /send (ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЗржЙржЬрж╛рж░ржХрзЗ ржорзЗрж╕рзЗржЬ) ---
@app.on_message(filters.command("send"))
async def send_to_user(client, message):
    if message.from_user.id != OWNER_ID: return
    
    try:
        _, user_id_str, *msg_parts = message.text.split(maxsplit=2)
        user_id = int(user_id_str)
        msg = msg_parts[0]
        await client.send_message(user_id, f"тЬЙя╕П ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржорзЗрж╕рзЗржЬ:\n\n{msg}")
        await message.reply_text(f"тЬЕ ржорзЗрж╕рзЗржЬржЯрж┐ ржЗржЙржЬрж╛рж░ {user_id} ржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")
    except Exception as e:
        await message.reply_text(f"тЭМ ржХржорж╛ржирзНржб рждрзНрж░рзБржЯрж┐ред ржмрзНржпржмрж╣рж╛рж░: `/send <user_id> <message>`")


# --- ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб: /broadcast (рж╕ржмрж╛ржЗржХрзЗ ржорзЗрж╕рзЗржЬ) ---
@app.on_message(filters.command("broadcast"))
async def broadcast_message(client, message):
    if message.from_user.id != OWNER_ID: return
    
    try:
        msg = message.text.split(maxsplit=1)[1]
        cursor.execute("SELECT user_id FROM users WHERE is_blocked = 0")
        users = cursor.fetchall()
        
        sent_count = 0
        for user in users:
            try:
                await client.send_message(user[0], f"ЁЯУв **ржЕрзНржпрж╛ржбржорж┐ржи ржмрзНрж░ржбржХрж╛рж╕рзНржЯ**\n\n{msg}")
                sent_count += 1
            except Exception:
                pass
        
        await message.reply_text(f"тЬЕ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ рж╕ржлрж▓ред ржорзЛржЯ {sent_count} ржЬржи ржЗржЙржЬрж╛рж░ржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")
    except IndexError:
        await message.reply_text("тЭМ ржХржорж╛ржирзНржб рждрзНрж░рзБржЯрж┐ред ржмрзНржпржмрж╣рж╛рж░: `/broadcast <message>`")


# --- ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб: /block ржУ /unblock ---
@app.on_message(filters.command(["block", "unblock"]))
async def block_unblock_user(client, message):
    if message.from_user.id != OWNER_ID: return
    
    try:
        _, user_id_str = message.text.split(maxsplit=1)
        user_id = int(user_id_str)
        
        status = 1 if message.command[0] == "block" else 0
        status_text = "ЁЯЪл ржмрзНрж▓ржХ" if status == 1 else "тЬЕ ржЖржиржмрзНрж▓ржХ"
        
        cursor.execute("UPDATE users SET is_blocked = ? WHERE user_id = ?", (status, user_id))
        conn.commit()
        
        await message.reply_text(f"тЬЕ ржЗржЙржЬрж╛рж░ {user_id} рж╕ржлрж▓ржнрж╛ржмрзЗ {status_text} ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    except Exception:
        await message.reply_text(f"тЭМ ржХржорж╛ржирзНржб рждрзНрж░рзБржЯрж┐ред ржмрзНржпржмрж╣рж╛рж░: `/{message.command[0]} <user_id>`")


# --- ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб: /user_list ---
@app.on_message(filters.command("user_list"))
async def user_list_command(client, message):
    if message.from_user.id != OWNER_ID: return
    
    cursor.execute("SELECT user_id, task_balance, referral_balance, referral_count, is_blocked FROM users ORDER BY user_id ASC")
    users = cursor.fetchall()
    
    if not users:
        await message.reply_text("тЭМ ржХрзЛржирзЛ ржЗржЙржЬрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return

    list_text = "ЁЯСе **ржЗржЙржЬрж╛рж░ рждрж╛рж▓рж┐ржХрж╛**\n\n"
    
    for i, user in enumerate(users):
        user_id, task_bal, ref_bal, ref_count, is_blocked = user
        total_balance = task_bal + ref_bal
        status_emoji = "ЁЯЪл" if is_blocked == 1 else "тЬЕ"
        
        try:
            user_info = await client.get_users(user_id)
            user_name = user_info.first_name or "N/A"
        except Exception:
            user_name = "Deleted Account"
            
        new_entry = (
            f"{i+1}. ЁЯСд User name: {user_name}\n"
            f" ЁЯЖФ User ID: `{user_id}`\n"
            f" ЁЯТ░ Balance: {total_balance:.2f} рз│\n"
            f" ЁЯОЙ Refer: {ref_count} ржЬржи\n"
            f" ЁЯОи Status: {status_emoji}\n"
            "------------------------\n"
        )
        
        if len(list_text) + len(new_entry) > 3800: # ржорзЗрж╕рзЗржЬрзЗрж░ рж╕рзАржорж╛
            await message.reply_text(list_text)
            list_text = "ЁЯСе **ржЗржЙржЬрж╛рж░ рждрж╛рж▓рж┐ржХрж╛ (ржЪрж▓ржорж╛ржи)**\n\n"
            
        list_text += new_entry
            
    await message.reply_text(list_text)


# --- ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб: /withdraws (ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржжрзЗржЦрж╛ржирзЛ) ---
@app.on_message(filters.command("withdraws"))
async def admin_withdraw_list(client, message):
    if message.from_user.id != OWNER_ID: return
    
    cursor.execute(
        "SELECT id, user_id, amount, method, account_number, timestamp FROM withdraw_history WHERE status = 'Pending' ORDER BY timestamp ASC"
    )
    requests = cursor.fetchall()
    
    if not requests:
        await message.reply_text("тЬЕ ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржирзЛ Pending ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржирзЗржЗред")
        return
    
    for req in requests:
        req_id, user_id, amount, method, number, timestamp = req
        
        try:
            user_info = await client.get_users(user_id)
            user_name = user_info.first_name or "N/A"
        except Exception:
            user_name = "Deleted Account"

        text = (
            f"**ЁЯТ░ ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ (ID: {req_id})**\n\n"
            f"ЁЯУЕ {timestamp[:10]} - {timestamp[11:16]}\n"
            f"ЁЯСд User name: {user_name}\n"
            f"ЁЯЖФ User ID: `{user_id}`\n"
            f"ЁЯТ░ Amount: **{amount:.2f} рз│**\n"
            f"ЁЯПж Method: {method}\n"
            f"ЁЯФв Number: {number}\n"
        )
        
        buttons = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("тЬЕ Approve", callback_data=f"w_approve_{req_id}"),
                    InlineKeyboardButton("тЭМ Reject", callback_data=f"w_reject_{req_id}")
                ]
            ]
        )
        await message.reply_text(text, reply_markup=buttons)


# --- ржХрзНржпрзЛржпрж╝рж╛рж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ржЙржЗржержбрзНрж░ Approve/Reject ---
@app.on_callback_query(filters.regex("^w_(approve|reject)_"))
async def withdraw_action_handler(client, callback_query):
    if callback_query.from_user.id != OWNER_ID:
        await callback_query.answer("тЭМ ржЖржкржирж╛рж░ ржПржЗ ржЕрзНржпрж╛ржХрж╢ржи ржирзЗржУржпрж╝рж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗред")
        return

    action, req_id_str = callback_query.data.split('_', 1)
    req_id = int(req_id_str)
    
    cursor.execute("SELECT status, user_id, amount FROM withdraw_history WHERE id = ?", (req_id,))
    req_data = cursor.fetchone()
    
    if not req_data:
        await callback_query.edit_message_text(f"тЭМ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ (ID: {req_id}) ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        await callback_query.answer("рждрзНрж░рзБржЯрж┐: рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржирзЗржЗред")
        return
        
    current_status, user_id, amount = req_data
    
    if current_status != 'Pending':
        await callback_query.edit_message_text(callback_query.message.text + f"\n\n**тЪая╕П ржЗрждрж┐ржоржзрзНржпрзЗржЗ {current_status} ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред**")
        await callback_query.answer("ржПржЗ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржЬрж╛ржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        return
        
    new_status = "Approved" if action == "approve" else "Rejected"
    
    # 1. Database ржЖржкржбрзЗржЯ
    cursor.execute("UPDATE withdraw_history SET status = ? WHERE id = ?", (new_status, req_id))
    
    # 2. Reject рж╣рж▓рзЗ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржлрж┐рж░рж┐ржпрж╝рзЗ ржжрзЗржУржпрж╝рж╛
    if new_status == "Rejected":
        # Note: ржПржЦрж╛ржирзЗ ржлрж┐ ржПрж░ ржХрзЛржирзЛ рж╣рж┐рж╕рж╛ржм ржирзЗржЗ ржХрж╛рж░ржг ржЯрж╛ржХрж╛ржЯрж┐ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржЫрж┐рж▓, рж╢рзБржзрзБ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ рж╣ржЪрзНржЫрзЗред
        # ржпржЦржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рждрзИрж░рж┐ рж╣ржмрзЗ, рждржЦржи ржлрж┐-ржПрж░ рж╣рж┐рж╕рж╛ржм ржпрзЛржЧ ржХрж░рж╛ рж╣ржмрзЗред
        # ржЖржкрж╛рждржд ржкрзБрж░рзЛ ржЯрж╛ржХрж╛ржЯрж╛ржЗ ржлрж┐рж░рж┐ржпрж╝рзЗ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛред
        cursor.execute("UPDATE users SET task_balance = task_balance + ? WHERE user_id = ?", (amount, user_id)) 
        await client.send_message(user_id, f"тЭМ ржжрзБржГржЦрж┐ржд! ржЖржкржирж╛рж░ **{amount:.2f} ржЯрж╛ржХрж╛** ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржзржЯрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЯрж╛ржХрж╛ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржлрзЗрж░ржд ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        # Approve рж╣рж▓рзЗ ржЯрж╛ржХрж╛ рждрзЛрж▓рж╛ржЗ ржЫрж┐рж▓, рж╢рзБржзрзБ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ рж╣ржмрзЗред
        await client.send_message(user_id, f"тЬЕ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ **{amount:.2f} ржЯрж╛ржХрж╛** ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржзржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж┐ рж╢рзАржШрзНрж░ржЗ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржкрзЗржпрж╝рзЗ ржпрж╛ржмрзЗржиред")

    conn.commit()

    # 3. ржорзЗрж╕рзЗржЬ ржЖржкржбрзЗржЯ
    await callback_query.edit_message_text(callback_query.message.text + f"\n\n**тЬЕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: {new_status} (ржЕрзНржпрж╛ржбржорж┐ржи ржжрзНржмрж╛рж░рж╛)**")
    await callback_query.answer(f"рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ {new_status} ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")


# --- ржиржи-ржХржорж╛ржирзНржб ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржПржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржЯрзНрж░рж╛ржирзНрж╕ржлрж╛рж░) ---
@app.on_message(filters.text & ~filters.command)
async def forward_to_admin(client, message):
    
    # ржПржЯрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗ ржпрзЗ ржПржЯрж┐ ржХрзЛржирзЛ ржорзЗржирзБ ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ ржиржпрж╝
    main_menu_texts = ["ЁЯТ░ Daily Bonus", "ЁЯФЧ Refer & Earn", "ЁЯТ│ Withdraw", "ЁЯСд My Account", "ЁЯз╛ History", "ЁЯСС Status (Admin)"]
    if message.text in main_menu_texts:
        # ржпржжрж┐ ржПржЯрж┐ ржорзЗржирзБрж░ ржорзЗрж╕рзЗржЬ рж╣ржпрж╝, рждржмрзЗ ржПржЯрж┐ ржЙржкрзЗржХрзНрж╖рж╛ ржХрж░ржмрзЗ, ржЕржирзНржп ржХрзЛржирзЛ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржПржЯрж┐ ржЧрзНрж░рж╣ржг ржХрж░ржмрзЗ
        return
        
    user_id = message.from_user.id
    
    # ржЗржЙржЬрж╛рж░ ржмрзНрж▓ржХ ржХрж░рж╛ ржерж╛ржХрж▓рзЗ ржХрж┐ржЫрзБ ржХрж░ржмрзЗ ржирж╛
    if is_user_blocked(user_id): return
    
    # ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржорзЗрж╕рзЗржЬ ржлрж░ржУржпрж╝рж╛рж░рзНржб ржХрж░рж╛
    await client.forward_messages(
        chat_id=OWNER_ID,
        from_chat_id=message.chat.id,
        message_ids=message.id
    )
    
    # ржЗржЙржЬрж╛рж░ржХрзЗ ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг ржорзЗрж╕рзЗржЬ ржжрзЗржУржпрж╝рж╛
    await message.reply_text(
        "тЬЕ ржЖржкржирж╛рж░ ржорзЗрж╕рзЗржЬржЯрж┐ ржПржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржЦрзБржм рж╢рзАржШрзНрж░ржЗ ржЖржкржирж╛ржХрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрзЗржУржпрж╝рж╛ рж╣ржмрзЗред"
    )

# --- ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ ---
print("Telegram Earning Bot is starting...")
app.run()
