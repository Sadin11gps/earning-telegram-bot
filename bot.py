import os
import time
import asyncio
import psycopg2 
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message, CallbackQuery
)
from dotenv import load_dotenv

# dotenv рж▓рзЛржб ржХрж░рж╛ (ржпржжрж┐ .env ржлрж╛ржЗрж▓ ржерж╛ржХрзЗ)
load_dotenv() 

# **********************************************
# --- тЬЕ ржлрж┐ржХрзНрж╕ржб ржоржбрж┐ржЙрж▓ ржЗржорзНржкрзЛрж░рзНржЯ ---
# **********************************************
# NOTE: ржЖржкржирж╛рж░ ржПржЗ ржоржбрж┐ржЙрж▓ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛрждрзЗржУ PostgreSQL рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕ (%s) ржлрж┐ржХрзНрж╕ ржХрж░рждрзЗ рж╣ржмрзЗред
import withdraw_handlers as withdraw_mod 
import task_1 
import task_2 
import task_3 
import task_4 
import task_5 
import task_6 
import task_7 
import task_8 
import task_9 
import task_10 

# --- ржЯрж╛рж╕рзНржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк ржлрж╛ржВрж╢ржи ---
def setup_task_handlers(app: Client):
    task_1.setup_task_handlers(app)
    task_2.setup_task_handlers(app)
    task_3.setup_task_handlers(app)
    task_4.setup_task_handlers(app)
    task_5.setup_task_handlers(app)
    task_6.setup_task_handlers(app)
    task_7.setup_task_handlers(app)
    task_8.setup_task_handlers(app)
    task_9.setup_task_handlers(app)
    task_10.setup_task_handlers(app)


# **********************************************
# **** ржХрзНрж▓рж╛ржЙржб рж╣рзЛрж╕рзНржЯрж┐ржВ-ржПрж░ ржЬржирзНржп ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ****
# **********************************************
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# тЬЕ ржЪрзВржбрж╝рж╛ржирзНржд ржлрж┐ржХрзНрж╕: DATABASE_URL ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL and os.getenv("PGHOST"):
    # Railway-ржПрж░ рж╕рзНржмрждржирзНрждрзНрж░ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ URL рждрзИрж░рж┐ ржХрж░рж╛
    PGHOST = os.getenv("PGHOST")
    PGUSER = os.getenv("PGUSER")
    PGPASSWORD = os.getenv("PGPASSWORD")
    PGDATABASE = os.getenv("PGDATABASE")
    PGPORT = os.getenv("PGPORT")
    DATABASE_URL = f"postgres://{PGUSER}:{PGPASSWORD}@{PGHOST}:{PGPORT}/{PGDATABASE}"

# **********************************************

# **** ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐ (ржЖржкржирж╛рж░ Telegram ID) ****
OWNER_ID = 7702378694  
ADMIN_CONTACT_USERNAME = "rdsratul81" 
# **********************************************

# **********************************************
# **** ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзНржЯрзЗржЯ ржПржмржВ ржмрзНржпржмрж╕рж╛ржпрж╝рж┐ржХ рж▓ржЬрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ****
# **********************************************
USER_STATE = {} 
REFER_BONUS = 30.00          
MIN_WITHDRAW = 1500.00       
WITHDRAW_FEE_PERCENT = 10.0  
REQUIRED_REFERRALS = 20      
# **********************************************


# --- тЬЕ ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржУ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи (PostgreSQL) ---
conn = None
cursor = None

def init_db():
    global conn, cursor
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # ржЗржЙржЬрж╛рж░ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ (PostgreSQL Syntax)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                task_balance NUMERIC(10, 2) DEFAULT 0.00,
                referral_balance NUMERIC(10, 2) DEFAULT 0.00,
                referral_count INTEGER DEFAULT 0,
                referred_by BIGINT,
                is_blocked INTEGER DEFAULT 0,
                last_bonus_time BIGINT DEFAULT 0
            )
        """)

        # ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржЯрзЗржмрж┐рж▓ (PostgreSQL Syntax)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS withdraw_history (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                amount NUMERIC(10, 2),
                method TEXT,
                account_number TEXT,
                status TEXT DEFAULT 'Pending',
                timestamp TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()
        print("Database initialized successfully.")
        return conn, cursor
    except Exception as e:
        print(f"Database connection error: {e}")
        return None, None

# ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЖржЧрзЗ ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржХрж░рзБржи
conn, cursor = init_db()

# --- ржХрзАржмрзЛрж░рзНржб рж╕рзЗржЯржЖржк ---

# ржорзВрж▓ ржорзЗржирзБрж░ ржмрж╛ржЯржи (Reply Keyboard)
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("ЁЯТ░ Daily Bonus"), KeyboardButton("ЁЯФЧ Refer & Earn")],
        [KeyboardButton("Withdraw"), KeyboardButton("ЁЯСд My Account")],
        [KeyboardButton("ЁЯз╛ History"), KeyboardButton("ЁЯСС Status (Admin)")]
    ],
    resize_keyboard=True
)

# ржЯрж╛рж╕рзНржХ ржорзЗржирзБрж░ ржмрж╛ржЯржи (Reply Keyboard)
TASK_MENU_KEYBOARD_REPLY = ReplyKeyboardMarkup(
    [
        [KeyboardButton("ЁЯПЕ TASK-1_10 TK"), KeyboardButton("ЁЯПЕ TASK-2_10 TK")],
        [KeyboardButton("ЁЯПЕ TASK-3_10 TK"), KeyboardButton("ЁЯПЕ TASK-4_10 TK")],
        [KeyboardButton("ЁЯПЕ TASK-5_10 TK"), KeyboardButton("ЁЯПЕ TASK-6_10 TK")],
        [KeyboardButton("ЁЯПЕ TASK-7_10 TK"), KeyboardButton("ЁЯПЕ TASK-8_10 TK")],
        [KeyboardButton("ЁЯПЕ TASK-9_10 TK"), KeyboardButton("ЁЯПЕ TASK-10_10 TK")],
        [KeyboardButton("ЁЯПа MAIN MENU")]
    ],
    resize_keyboard=True
)


# --- Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ рж╕рзЗржЯржЖржк ---
app = Client(
    "earning_bot",
    api_id=int(API_ID),
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- ржлрж┐ржХрзНрж╕ржб: ржмрзНрж▓ржХржб ржЗржЙржЬрж╛рж░ ржЪрзЗржХ ---
def is_user_blocked(user_id):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None: return True
    
    # тЬЕ PostgreSQL (%s) ржмрзНржпржмрж╣рж╛рж░
    cursor.execute("SELECT is_blocked FROM users WHERE user_id = %s", (user_id,)) 
    result = cursor.fetchone()
    return result and result[0] == 1

# --- ржлрж╛ржВрж╢ржи: ржЗржЙржЬрж╛рж░ Database ржП ржпрзЛржЧ ржХрж░рж╛ ---
def add_user(user_id, referred_by=None):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None: return

    # тЬЕ PostgreSQL (%s) ржмрзНржпржмрж╣рж╛рж░
    cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,)) 
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, referred_by) VALUES (%s, %s)", (user_id, referred_by))
        conn.commit()
        if referred_by:
            # тЬЕ PostgreSQL (%s) ржмрзНржпржмрж╣рж╛рж░
            cursor.execute("UPDATE users SET referral_balance = referral_balance + %s, referral_count = referral_count + 1 WHERE user_id = %s", (REFER_BONUS, referred_by))
            conn.commit()
            return True
    return False


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: /start ржХржорж╛ржирзНржб ---
@app.on_message(filters.command("start"))
async def start_command(client, message):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕ (рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзЗрж░ рж╢рзБрж░рзБрждрзЗ)
    if cursor is None:
        await message.reply_text("тЫФя╕П ржжрзБржГржЦрж┐ржд! рж╕рж╛рж░рзНржнрж╛рж░ рж╕ржВржпрзЛржЧрзЗрж░ рж╕ржорж╕рзНржпрж╛рж░ ржХрж╛рж░ржгрзЗ ржмржЯржЯрж┐ ржмрж░рзНрждржорж╛ржирзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ ржирж╛ред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
    
    user_id = message.from_user.id
    first_name = message.from_user.first_name # ржирж╛ржо ржкрж╛ржУржпрж╝рж╛рж░ ржЬржирзНржп

    if is_user_blocked(user_id):
        await message.reply_text("тЭМ ржжрзБржГржЦрж┐ржд! ржЖржкржирж╛ржХрзЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржерзЗржХрзЗ ржмрзНрж▓ржХ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        return

    referred_by = None
    
    if len(message.command) > 1:
        try:
            referred_by = int(message.command[1])
            # тЬЕ PostgreSQL (%s) ржмрзНржпржмрж╣рж╛рж░
            cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (referred_by,)) 
            if referred_by == user_id or cursor.fetchone() is None:
                 referred_by = None
            else:
                pass 
        except ValueError:
            referred_by = None
            
    # тЬЕ ржирждрзБржи рж╕рзНржЯрж╛рж░рзНржЯ ржорзЗрж╕рзЗржЬ
    if add_user(user_id, referred_by):
        text = f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ ЁЯЕ│ЁЯЕ┤ЁЯЕ░ЁЯЖБ {first_name} тШАя╕П\n\nр╖┤тЭдя╕Пр╖┤ ЁЭРЦЁЭРЮЁЭРеЁЭРЬЁЭРиЁЭРжЁЭРЮ р╖┤тЭдя╕Пр╖┤\n\nржирж┐ржЪрзЗ ржорзВрж▓ ржорзЗржирзБ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛред"
    else:
        text = f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ ЁЯЕ│ЁЯЕ┤ЁЯЕ░ЁЯЖБ {first_name} тШАя╕П\n\nр╖┤тЭдя╕Пр╖┤ ЁЭРЦЁЭРЮЁЭРеЁЭРЬЁЭРиЁЭРжЁЭРЮ р╖┤тЭдя╕Пр╖┤\n\nржирж┐ржЪрзЗ ржорзВрж▓ ржорзЗржирзБ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛред"


    await message.reply_text(
        text,
        reply_markup=main_menu_keyboard
    )


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Daily Bonus (ржЖржкржирж╛рж░ рж▓ржЬрж┐ржХ) ---
@app.on_message(filters.regex("ЁЯТ░ Daily Bonus"))
async def daily_bonus_handler(client, message):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    if is_user_blocked(message.from_user.id): return
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None:
        await message.reply_text("тЫФя╕П ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржирзЗржЗред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
        
    await message.reply_text(
        "тЬЕ Task complete ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи.\n"
        "тЬЕ ржирж┐ржпрж╝ржо ржорзЗржирзЗ ржХрж╛ржЬ ржХрж░ржмрзЗржи ржЗржиржХрж╛ржо ржирж┐рж╢рзНржЪрж┐рждЁЯЪА",
        reply_markup=TASK_MENU_KEYBOARD_REPLY
    )

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: MAIN MENU ржмрж╛ржЯржи ---
@app.on_message(filters.regex("ЁЯПа MAIN MENU") & filters.private)
async def back_to_main_menu(client, message):
    await message.reply_text(
        "ЁЯСЛ ржЖржкржирж┐ ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржПрж╕рзЗржЫрзЗржиред",
        reply_markup=main_menu_keyboard
    )


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Refer & Earn (ржЖржкржирж╛рж░ рж▓ржЬрж┐ржХ) ---
@app.on_message(filters.regex("ЁЯФЧ Refer & Earn"))
async def refer_command(client, message):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    if is_user_blocked(message.from_user.id): return
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None:
        await message.reply_text("тЫФя╕П ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржирзЗржЗред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
        
    user_id = message.from_user.id
    bot_username = client.me.username if client.me.username else "YourBotUsername"
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    
    # тЬЕ PostgreSQL (%s) ржмрзНржпржмрж╣рж╛рж░
    cursor.execute("SELECT referral_count FROM users WHERE user_id = %s", (user_id,)) 
    data = cursor.fetchone()
    ref_count = data[0] if data else 0
    
    text = (
        "ЁЯОЙ **рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи!**\n"
        "-\n"
        f"ЁЯТ╕ REFER BOUNS: **{REFER_BONUS:.2f} TK**\n"
        f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓: **{ref_count} ржЬржи**\n"
        "-----------------------\n"
        "ЁЯМР **REFER LINK** ЁЯМР\n"
        f"ЁЯФЧ `{referral_link}`\n\n"
        "ЁЯЪА ржЙржкрж░рзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рж▓рж┐ржВржХржЯрж┐ ржХржкрж┐ ржХрж░рзЗ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржиред"
    )
    await message.reply_text(text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: My Account (ржЖржкржирж╛рж░ рж▓ржЬрж┐ржХ) ---
@app.on_message(filters.regex("ЁЯСд My Account"))
async def account_command(client, message):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    if is_user_blocked(message.from_user.id): return
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None:
        await message.reply_text("тЫФя╕П ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржирзЗржЗред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
        
    user_id = message.from_user.id
    # тЬЕ PostgreSQL (%s) ржмрзНржпржмрж╣рж╛рж░
    cursor.execute("SELECT task_balance, referral_balance, referral_count FROM users WHERE user_id = %s", (user_id,)) 
    data = cursor.fetchone()
    
    if data:
        # PostgreSQL NUMERIC 
        task_balance = float(data[0])
        referral_balance = float(data[1])
        ref_count = data[2]
        
        total_balance = task_balance + referral_balance
        
        text = (
            "ЁЯТ╝ **ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕**\n"
            "-\n"
            f"ЁЯПЕ Task ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{task_balance:.2f} рз│**\n"
            f"ЁЯТ╕ рж░рзЗржлрж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{referral_balance:.2f} рз│**\n"
            f"ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{total_balance:.2f} рз│**\n"
            f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓: **{ref_count} ржЬржи**\n\n"
            f"тЪая╕П **ржЙржЗржержбрзНрж░ рж╢рж░рзНржд**: **{MIN_WITHDRAW:.2f} рз│** ржПржмржВ **{REQUIRED_REFERRALS} ржЬржи рж░рзЗржлрж╛рж░**ред"
        )
    else:
        text = "тЭМ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржХржорж╛ржирзНржб ржжрж┐ржиред"

    await message.reply_text(text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: History (ржЖржкржирж╛рж░ рж▓ржЬрж┐ржХ) ---
@app.on_message(filters.regex("ЁЯз╛ History"))
async def history_command(client, message):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    if is_user_blocked(message.from_user.id): return
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None:
        await message.reply_text("тЫФя╕П ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржирзЗржЗред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
        
    user_id = message.from_user.id
    # тЬЕ PostgreSQL (%s) ржмрзНржпржмрж╣рж╛рж░
    cursor.execute(
        "SELECT timestamp, amount, method, account_number, status FROM withdraw_history WHERE user_id = %s ORDER BY timestamp DESC LIMIT 10", 
        (user_id,)
    )
    history = cursor.fetchall()
    
    if not history:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return

    history_text = "ЁЯз╛ **ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐**\n\n"
    for item in history:
        timestamp, amount, method, number, status = item
        status_emoji = "тЬЕ Approved" if status == "Approved" else ("тЭМ Rejected" if status == "Rejected" else "тП│ Pending")
        
        # PostgreSQL timestamp ржлрж░рзНржорж╛ржЯ ржХрж░рж╛
        formatted_timestamp = timestamp.strftime("%Y-%m-%d %H:%M")
        
        history_text += (
            f"ЁЯУЕ {formatted_timestamp[:10]} - {formatted_timestamp[11:16]}\n"
            f"ЁЯТ░ {float(amount):.2f} рз│\n"
            f"ЁЯПж {method}\n"
            f"ЁЯФв {number}\n"
            f"ЁЯОи {status_emoji}\n"
            "-----------------------\n"
        )
    
    await message.reply_text(history_text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Status (Admin) (ржЖржкржирж╛рж░ рж▓ржЬрж┐ржХ) ---
@app.on_message(filters.regex("ЁЯСС Status \\(Admin\\)"))
async def admin_status_command(client, message):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    if is_user_blocked(message.from_user.id): return
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None:
        await message.reply_text("тЫФя╕П ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржирзЗржЗред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
        
    contact_button = InlineKeyboardMarkup(
        [[InlineKeyboardButton("ЁЯТм CONTACT", url=f"https://t.me/{ADMIN_CONTACT_USERNAME}")]]
    )
    
    text = "тЬ│я╕П ржЬрж░рзБрж░рзА ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи тЬ│я╕П"
    await message.reply_text(text, reply_markup=contact_button)


# ЁЯЯв тЬЕ ржЪрзВржбрж╝рж╛ржирзНржд ржлрж┐ржХрзНрж╕: ржбрж╛ржпрж╝ржирж╛ржорж┐ржХ ржЯрж╛рж╕рзНржХ ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рж╕
for i in range(1, 11):
    task_name = f"TASK-{i}"
    button_text = f"ЁЯПЕ {task_name}_10 TK"
    callback_data = f"task_{i}_" 
    
    exec(f"""
@app.on_message(filters.regex("{button_text}") & filters.private)
async def show_task_{i}_details(client: Client, message: Message):
    from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton 
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЬЕ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рзБржи", callback_data="{callback_data}")]
    ])
    await message.reply_text(
        f"ЁЯПЕ **{task_name}** рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрзНрж░рж╕рзНрждрзБржд?\\n"
        "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ **'ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рзБржи'** ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЯрж╛рж╕рзНржХ рж╢рзБрж░рзБ ржХрж░рзБржи:",
        reply_markup=keyboard
    )
    """)
# =========================================================


# --- ржХрзНржпрзЛржпрж╝рж╛рж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Main Menu ржмрж╛ржЯржи (Inline) ---
@app.on_callback_query(filters.regex("^main_menu"))
async def back_to_main_menu_callback(client, callback_query):
    await callback_query.edit_message_text(
        "ЁЯСЛ ржЖржкржирж┐ ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржПрж╕рзЗржЫрзЗржиред",
        reply_markup=main_menu_keyboard
    )
    await callback_query.answer("ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржЧрзЗржЫрзЗржиред")


# --- ржЪрзВржбрж╝рж╛ржирзНржд ржлрж┐ржХрзНрж╕: ржиржи-ржХржорж╛ржирзНржб ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
@app.on_message(filters.private & filters.text & ~filters.regex("^Withdraw$")) 
async def process_text_messages(client, message):
    global conn, cursor # тЬЕ ржЧрзНрж▓рзЛржмрж╛рж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
    
    # тЬЕ NoneType ржлрж┐ржХрзНрж╕
    if cursor is None:
        await message.reply_text("тЫФя╕П ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржирзЗржЗред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
        
    main_menu_texts = ["ЁЯТ░ Daily Bonus", "ЁЯФЧ Refer & Earn", "ЁЯСд My Account", "ЁЯз╛ History", "ЁЯСС Status (Admin)", "BKASH", "NAGAD", "CANCEL", "ЁЯПа MAIN MENU"] 
    if message.text in main_menu_texts:
        return
        
    user_id = message.from_user.id
    
    if is_user_blocked(user_id): return
    
    await client.forward_messages(
        chat_id=OWNER_ID,
        from_chat_id=message.chat.id,
        message_ids=message.id
    )
    
    await message.reply_text(
        "тЬЕ ржЖржкржирж╛рж░ ржорзЗрж╕рзЗржЬржЯрж┐ ржПржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржЦрзБржм рж╢рзАржШрзНрж░ржЗ ржЖржкржирж╛ржХрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрзЗржУржпрж╝рж╛ рж╣ржмрзЗред"
    )
    

# **********************************************
# --- ржоржбрж┐ржЙрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ржЧрзБрж▓рзЛ ржЪрж╛рж▓рзБ ржХрж░рж╛ ржУ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛ ---
# **********************************************

# 1. рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржоржбрж┐ржЙрж▓ржЧрзБрж▓рзЛ ржЪрж╛рж▓рзБ ржХрж░рж╛
withdraw_mod.setup_withdraw_handlers(app, USER_STATE, group=-1) 
setup_task_handlers(app) 

# --- ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ ---
print("Telegram Earning Bot is starting...")
if __name__ == "__main__":
    app.run()
