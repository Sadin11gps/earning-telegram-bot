import os
import sqlite3
import time
from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)

# **********************************************
# --- тЬЕ ржлрж┐ржХрзНрж╕ржб ржоржбрж┐ржЙрж▓ ржЗржорзНржкрзЛрж░рзНржЯ ---
# **********************************************
# NOTE: ржЖржорж░рж╛ withdraw.py-ржХрзЗ withdraw_handlers.py ржирж╛ржо ржжрж┐ржЪрзНржЫрж┐ ржпрж╛рждрзЗ ржлрж╛ржЗрж▓ ржирж╛ржорзЗрж░ ржХржиржнрзЗржирж╢ржи ржарж┐ржХ ржерж╛ржХрзЗ
# NOTE: admin.py-ржПрж░ рж▓ржЬрж┐ржХ ржЖржорж░рж╛ ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЬржирзНржп bot.py-ржПрж░ ржнрзЗрждрж░рзЗржЗ рж░рзЗржЦрзЗржЫрж┐, admin ржлрж╛ржЗрж▓ ржЕржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝
import withdraw_handlers as withdraw_mod # ржоржбрж┐ржЙрж▓ржЯрж┐рж░ ржирж╛ржо ржЫрзЛржЯ ржХрж░рж▓рж╛ржо

# Task ржоржбрж┐ржЙрж▓ржЧрзБрж▓рзЛ (ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА)
import task_1 
import task_2 
import task_3 
import task_4 
import task_5 
import task_6 
import task_7 
import task_8 
import task_9 
import task_10 


# --- ржЯрж╛рж╕рзНржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк ржлрж╛ржВрж╢ржи ---
def setup_task_handlers(app: Client):
    # ржкрзНрж░рждрж┐ржЯрж┐ Task ржоржбрж┐ржЙрж▓рзЗрж░ рж╕рзЗржЯржЖржк ржлрж╛ржВрж╢ржи ржПржЦрж╛ржирзЗ ржХрж▓ ржХрж░рж╛ рж╣ржмрзЗ (Task ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛрждрзЗ setup_task_handlers ржлрж╛ржВрж╢ржи ржЖржЫрзЗ)
    task_1.setup_task_handlers(app)
    task_2.setup_task_handlers(app)
    task_3.setup_task_handlers(app)
    task_4.setup_task_handlers(app)
    task_5.setup_task_handlers(app)
    task_6.setup_task_handlers(app)
    task_7.setup_task_handlers(app)
    task_8.setup_task_handlers(app)
    task_9.setup_task_handlers(app)
    task_10.setup_task_handlers(app)


# **********************************************
# **** ржХрзНрж▓рж╛ржЙржб рж╣рзЛрж╕рзНржЯрж┐ржВ-ржПрж░ ржЬржирзНржп ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ****
# **********************************************
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# **** ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐ (ржЖржкржирж╛рж░ Telegram ID) ****
OWNER_ID = 7702378694  # ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐
ADMIN_CONTACT_USERNAME = "rdsratul81" 
# **********************************************

# **********************************************
# **** ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзНржЯрзЗржЯ ржПржмржВ ржмрзНржпржмрж╕рж╛ржпрж╝рж┐ржХ рж▓ржЬрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ****
# **********************************************
# USER_STATE ржПржЦрж╛ржирзЗ ржбрж┐ржлрж╛ржЗржи ржХрж░рж╛ рж╣рж▓рзЛ ржпрж╛рждрзЗ withdraw_handlers ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗ
USER_STATE = {} 
REFER_BONUS = 30.00          
MIN_WITHDRAW = 1500.00       
WITHDRAW_FEE_PERCENT = 10.0  
REQUIRED_REFERRALS = 20      
# **********************************************


# --- Database рж╕рзЗржЯржЖржк ---
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# ржЗржЙржЬрж╛рж░ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐/ржЖржкржбрзЗржЯ
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        task_balance REAL DEFAULT 0.00,
        referral_balance REAL DEFAULT 0.00,
        referral_count INTEGER DEFAULT 0,
        referred_by INTEGER,
        is_blocked INTEGER DEFAULT 0,
        last_bonus_time INTEGER DEFAULT 0
    )
''')

# ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржЯрзЗржмрж┐рж▓ 
cursor.execute('''
    CREATE TABLE IF NOT EXISTS withdraw_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        method TEXT,
        account_number TEXT,
        status TEXT DEFAULT 'Pending',
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')
conn.commit()

# --- ржХрзАржмрзЛрж░рзНржб рж╕рзЗржЯржЖржк ---

# ржорзВрж▓ ржорзЗржирзБрж░ ржмрж╛ржЯржи (Reply Keyboard) - ржЖржкржирж╛рж░ ржЖрж╕рж▓ ржХрзЛржб ржерзЗржХрзЗ ржирзЗржУржпрж╝рж╛
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("ЁЯТ░ Daily Bonus"), KeyboardButton("ЁЯФЧ Refer & Earn")],
        [KeyboardButton("Withdraw"), KeyboardButton("ЁЯСд My Account")],
        [KeyboardButton("ЁЯз╛ History"), KeyboardButton("ЁЯСС Status (Admin)")]
    ],
    resize_keyboard=True
)

# ржЯрж╛рж╕рзНржХ ржорзЗржирзБрж░ ржмрж╛ржЯржи (Inline Keyboard) - ржЖржкржирж╛рж░ ржЖрж╕рж▓ ржХрзЛржб ржерзЗржХрзЗ ржирзЗржУржпрж╝рж╛
task_menu_keyboard = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton("ЁЯПЕ TASK-1_10 TK", callback_data="task_1_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-2_10 TK", callback_data="task_2_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-3_10 TK", callback_data="task_3_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-4_10 TK", callback_data="task_4_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-5_10 TK", callback_data="task_5_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-6_10 TK", callback_data="task_6_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-7_10 TK", callback_data="task_7_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-8_10 TK", callback_data="task_8_10")
        ],
        [
            InlineKeyboardButton("ЁЯПЕ TASK-9_10 TK", callback_data="task_9_10"),
            InlineKeyboardButton("ЁЯПЕ TASK-10_10 TK", callback_data="task_10_10")
        ],
        [
            InlineKeyboardButton("ЁЯПа MAIN MENU", callback_data="main_menu")
        ]
    ]
)

# --- Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ рж╕рзЗржЯржЖржк ---
app = Client(
    "earning_bot",
    api_id=int(API_ID),
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- ржлрж╛ржВрж╢ржи: ржЗржЙржЬрж╛рж░ Database ржП ржпрзЛржЧ ржХрж░рж╛ ---
def add_user(user_id, referred_by=None):
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, referred_by) VALUES (?, ?)", (user_id, referred_by))
        conn.commit()
        if referred_by:
            cursor.execute("UPDATE users SET referral_balance = referral_balance + ?, referral_count = referral_count + 1 WHERE user_id = ?", (REFER_BONUS, referred_by))
            conn.commit()
            return True
    return False

# --- тЬЕ ржлрж┐ржХрзНрж╕ржб: ржмрзНрж▓ржХржб ржЗржЙржЬрж╛рж░ ржЪрзЗржХ (рж╕рж┐ржорзНржкрж▓ ржлрж╛ржВрж╢ржи) ---
def is_user_blocked(user_id):
    cursor.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result and result[0] == 1


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: /start ржХржорж╛ржирзНржб ---
@app.on_message(filters.command("start"))
async def start_command(client, message):
    user_id = message.from_user.id

    if is_user_blocked(user_id):
        await message.reply_text("тЭМ ржжрзБржГржЦрж┐ржд! ржЖржкржирж╛ржХрзЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржерзЗржХрзЗ ржмрзНрж▓ржХ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        return

    referred_by = None
    
    if len(message.command) > 1:
        try:
            referred_by = int(message.command[1])
            cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (referred_by,))
            if referred_by == user_id or cursor.fetchone() is None:
                 referred_by = None
            else:
                # add_user ржлрж╛ржВрж╢ржирзЗрж░ ржнрзЗрждрж░рзЗ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓ржЬрж┐ржХ ржЖржЫрзЗ
                pass # рж▓ржЬрж┐ржХ ржирж┐ржЪрзЗ add_user ржПрж░ ржнрзЗрждрж░рзЗ ржерж╛ржХржмрзЗ
        except ValueError:
            referred_by = None
            
    if add_user(user_id, referred_by):
        text = "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"
    else:
        text = "ЁЯСЛ ржЖржмрж╛рж░ рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗ ржорзВрж▓ ржорзЗржирзБ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛред"

    await message.reply_text(
        text,
        reply_markup=main_menu_keyboard
    )


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Daily Bonus ---
@app.on_message(filters.regex("ЁЯТ░ Daily Bonus"))
async def daily_bonus_handler(client, message):
    if is_user_blocked(message.from_user.id): return
    
    await message.reply_text(
        "тЬЕ Task complete ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи.\n"
        "тЬЕ ржирж┐ржпрж╝ржо ржорзЗржирзЗ ржХрж╛ржЬ ржХрж░ржмрзЗржи ржЗржиржХрж╛ржо ржирж┐рж╢рзНржЪрж┐рждЁЯЪА",
        reply_markup=task_menu_keyboard
    )


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Refer & Earn ---
@app.on_message(filters.regex("ЁЯФЧ Refer & Earn"))
async def refer_command(client, message):
    if is_user_blocked(message.from_user.id): return
    user_id = message.from_user.id
    bot_username = client.me.username if client.me.username else "YourBotUsername"
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    
    cursor.execute("SELECT referral_count FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    ref_count = data[0] if data else 0
    
    text = (
        "ЁЯОЙ **рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи!**\n"
        "-\n"
        f"ЁЯТ╕ REFER BOUNS: **{REFER_BONUS:.2f} TK**\n"
        f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓: **{ref_count} ржЬржи**\n"
        "-----------------------\n"
        "ЁЯМР **REFER LINK** ЁЯМР\n"
        f"ЁЯФЧ `{referral_link}`\n\n"
        "ЁЯЪА ржЙржкрж░рзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рж▓рж┐ржВржХржЯрж┐ ржХржкрж┐ ржХрж░рзЗ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржиред"
    )
    await message.reply_text(text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: My Account ---
@app.on_message(filters.regex("ЁЯСд My Account"))
async def account_command(client, message):
    if is_user_blocked(message.from_user.id): return
    user_id = message.from_user.id
    cursor.execute("SELECT task_balance, referral_balance, referral_count FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    
    if data:
        task_balance, referral_balance, ref_count = data
        total_balance = task_balance + referral_balance
        
        text = (
            "ЁЯТ╝ **ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕**\n"
            "-\n"
            f"ЁЯПЕ Task ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{task_balance:.2f} рз│**\n"
            f"ЁЯТ╕ рж░рзЗржлрж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{referral_balance:.2f} рз│**\n"
            f"ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{total_balance:.2f} рз│**\n"
            f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓: **{ref_count} ржЬржи**\n\n"
            f"тЪая╕П **ржЙржЗржержбрзНрж░ рж╢рж░рзНржд**: **{MIN_WITHDRAW:.2f} рз│** ржПржмржВ **{REQUIRED_REFERRALS} ржЬржи рж░рзЗржлрж╛рж░**ред"
        )
    else:
        text = "тЭМ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржХржорж╛ржирзНржб ржжрж┐ржиред"

    await message.reply_text(text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: History ---
@app.on_message(filters.regex("ЁЯз╛ History"))
async def history_command(client, message):
    if is_user_blocked(message.from_user.id): return
    user_id = message.from_user.id
    cursor.execute(
        "SELECT timestamp, amount, method, account_number, status FROM withdraw_history WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10", 
        (user_id,)
    )
    history = cursor.fetchall()
    
    if not history:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return

    history_text = "ЁЯз╛ **ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐**\n\n"
    for item in history:
        timestamp, amount, method, number, status = item
        status_emoji = "тЬЕ Approved" if status == "Approved" else ("тЭМ Rejected" if status == "Rejected" else "тП│ Pending")
        
        history_text += (
            f"ЁЯУЕ {timestamp[:10]} - {timestamp[11:16]}\n"
            f"ЁЯТ░ {amount:.2f} рз│\n"
            f"ЁЯПж {method}\n"
            f"ЁЯФв {number}\n"
            f"ЁЯОи {status_emoji}\n"
            "-----------------------\n"
        )
    
    await message.reply_text(history_text)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Status (Admin) ---
@app.on_message(filters.regex("ЁЯСС Status \\(Admin\\)"))
async def admin_status_command(client, message):
    if is_user_blocked(message.from_user.id): return
    contact_button = InlineKeyboardMarkup(
        [[InlineKeyboardButton("ЁЯТм CONTACT", url=f"https://t.me/{ADMIN_CONTACT_USERNAME}")]]
    )
    
    text = "тЬ│я╕П ржЬрж░рзБрж░рзА ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи тЬ│я╕П"
    await message.reply_text(text, reply_markup=contact_button)


# --- ржХрзНржпрзЛржпрж╝рж╛рж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ржЯрж╛рж╕рзНржХ ржмрж╛ржЯржиржЧрзБрж▓рзЛ (Daily Bonus ржорзЗржирзБрж░ ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржи) ---
@app.on_callback_query(filters.regex("^task_"))
async def task_callback_handler(client, callback_query):
    # ржПржЗ ржХрж▓ржмрзНржпрж╛ржХржЯрж┐ task_X.py ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛрж░ ржорзВрж▓ рж▓ржЬрж┐ржХ рж╢рзБрж░рзБ ржХрж░ржмрзЗ
    # task_X.py ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржПржЗ ржХрж▓ржмрзНржпрж╛ржХржЯрж┐ ржзрж░рж╛рж░ ржЬржирзНржп рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    
    task_data = callback_query.data # ржпрзЗржоржи: 'task_1_10'
    task_num = task_data.split('_')[0].split('task_')[1] # ржпрзЗржоржи: '1'

    # Task рж▓ржЬрж┐ржХ ржХрж▓ ржХрж░рж╛рж░ ржЬржирзНржп ржЙржкржпрзБржХрзНржд ржорзЗрж╕рзЗржЬ рждрзИрж░рж┐ ржХрж░рж╛
    task_logic = f"TASK-{task_num}" # task_X.py рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзЗрж░ regex ржПржЦрж╛ржирзЗ ржзрж░ржмрзЗ
    
    # ржпрзЗрж╣рзЗрждрзБ ржЖрж╕рж▓ рж▓ржЬрж┐ржХ task_X.py-ржП, рждрж╛ржЗ ржЖржорж░рж╛ ржЗржЙржЬрж╛рж░ржХрзЗ ржорзВрж▓ ржорзЗрж╕рзЗржЬржЯрж┐ ржЖржмрж╛рж░ ржжрзЗржЦрж╛ржмрзЛ
    await callback_query.edit_message_text(
        f"ржЖржкржирж┐ **Task {task_num}** ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржиред ржПржЦржи ржирж┐ржЪрзЗрж░ 'START TIMER' ржмрж╛ржЯржиржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред\n"
        f"ржпржжрж┐ ржмрж╛ржЯржи ржирж╛ ржЖрж╕рзЗ, рждржмрзЗ ржорзВрж▓ ржорзЗржирзБ ржерзЗржХрзЗ ржЖржмрж╛рж░ **ЁЯТ░ Daily Bonus** ржЯрж┐ржкрзБржиред",
        reply_markup=task_menu_keyboard
    )
    await callback_query.answer(f"Task {task_num} рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗред")
    

# --- ржХрзНржпрзЛржпрж╝рж╛рж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Main Menu ржмрж╛ржЯржи ---
@app.on_callback_query(filters.regex("^main_menu"))
async def back_to_main_menu(client, callback_query):
    # ржЗржирж▓рж╛ржЗржи ржХрзАржмрзЛрж░рзНржб ржорзБржЫрзЗ ржжрж┐ржпрж╝рзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрзАржмрзЛрж░рзНржб ржжрзЗржЦрж╛ржмрзЗ
    await callback_query.edit_message_text(
        "ЁЯСЛ ржЖржкржирж┐ ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржПрж╕рзЗржЫрзЗржиред",
        reply_markup=main_menu_keyboard
    )
    await callback_query.answer("ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржЧрзЗржЫрзЗржиред")


# --- ржЪрзВржбрж╝рж╛ржирзНржд ржлрж┐ржХрзНрж╕: ржиржи-ржХржорж╛ржирзНржб ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЙржЗржержбрзНрж░ ржлрзНрж▓рзЛ ржПржмржВ ржлрж░ржУржпрж╝рж╛рж░рзНржб рж▓ржЬрж┐ржХ) ---
@app.on_message(filters.private & filters.text & ~filters.regex("^Withdraw$")) 
async def process_text_messages(client, message):
    
    # 1. ржЙржЗржержбрзНрж░ ржкрзНрж░рж╕рзЗрж╕ ржЪрж▓ржЫрзЗ ржХрж┐ржирж╛, рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи (ржЪрж▓рж▓рзЗ, withdraw_handlers.py рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░ржмрзЗ)
    # ржпрзЗрж╣рзЗрждрзБ withdraw_handlers.py рждрзЗ group=-1 ржкрзНрж░рж╛ржЗржУрж░рж┐ржЯрж┐ ржерж╛ржХржмрзЗ, рждрж╛ржЗ ржПржЯрж┐ ржЖржЧрзЗ ржЪрзЗржХ ржХрж░ржмрзЗ
    # ржпржжрж┐ ржПржЯрж┐ ржПржЦрж╛ржирзЗ ржкрзМржБржЫрж╛ржпрж╝, рждрж╛рж╣рж▓рзЗ ржЙржЗржержбрзНрж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржорзЗрж╕рзЗржЬржЯрж┐ ржзрж░рзЗржирж┐ред
    
    # 2. ржорзЗржирзБ ржмрж╛ржЯржиржЧрзБрж▓рзЛрж░ ржЯрзЗржХрзНрж╕ржЯ ржерж╛ржХрж▓рзЗ ржПржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржи (ржПржЧрзБрж▓рзЛ ржЕржирзНржп рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржзрж░ржмрзЗ)
    main_menu_texts = ["ЁЯТ░ Daily Bonus", "ЁЯФЧ Refer & Earn", "ЁЯСд My Account", "ЁЯз╛ History", "ЁЯСС Status (Admin)", "BKASH", "NAGAD", "CANCEL"] 
    if message.text in main_menu_texts:
        return
        
    user_id = message.from_user.id
    
    if is_user_blocked(user_id): return
    
    # ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржорзЗрж╕рзЗржЬ ржлрж░ржУржпрж╝рж╛рж░рзНржб ржХрж░рж╛ (ржпржжрж┐ ржЙржкрж░рзЗрж░ ржХрзЛржирзЛ рж╢рж░рзНрждрзЗ ржирж╛ ржкржбрж╝рзЗ)
    await client.forward_messages(
        chat_id=OWNER_ID,
        from_chat_id=message.chat.id,
        message_ids=message.id
    )
    
    # ржЗржЙржЬрж╛рж░ржХрзЗ ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг ржорзЗрж╕рзЗржЬ ржжрзЗржУржпрж╝рж╛
    await message.reply_text(
        "тЬЕ ржЖржкржирж╛рж░ ржорзЗрж╕рзЗржЬржЯрж┐ ржПржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржЦрзБржм рж╢рзАржШрзНрж░ржЗ ржЖржкржирж╛ржХрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрзЗржУржпрж╝рж╛ рж╣ржмрзЗред"
    )
    

# **********************************************
# --- ржоржбрж┐ржЙрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ржЧрзБрж▓рзЛ ржЪрж╛рж▓рзБ ржХрж░рж╛ ржУ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛ ---
# **********************************************

# 1. рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржоржбрж┐ржЙрж▓ржЧрзБрж▓рзЛ ржЪрж╛рж▓рзБ ржХрж░рж╛
# group=-1 ржорж╛ржирзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░, ржпрж╛рждрзЗ ржЙржЗржержбрзНрж░ ржкрзНрж░рж╕рзЗрж╕ ржЯрзЗржХрзНрж╕ржЯ ржорзЗрж╕рзЗржЬржЧрзБрж▓рзЛ ржЖржЧрзЗ ржзрж░рждрзЗ ржкрж╛рж░рзЗ
withdraw_mod.setup_withdraw_handlers(app, USER_STATE, group=-1) 
setup_task_handlers(app) # Task рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржХрж▓

# --- ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ ---
print("Telegram Earning Bot is starting...")
if __name__ == "__main__":
    app.run()
