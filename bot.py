import sqlite3
import os
from pyrogram import Client, filters
from pyrogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# --- ржЯрж╛рж╕рзНржХ ржПржмржВ ржЙржЗржержбрзНрж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржЗржоржкрзЛрж░рзНржЯ ---
# ржПржЗ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛрждрзЗ ржЖржкржирж╛рж░ ржорзВрж▓ рж▓ржЬрж┐ржХ ржЖржЫрзЗ
import task_1 
import task_2 
import task_3 
import task_4 
import task_5 
import task_6 
import task_7 
import task_8 
import task_9 
import task_10 
import withdraw_handlers 

# --- API ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
# API ID, API HASH ржПржмржВ BOT_TOKEN ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ (.env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ) ржерзЗржХрзЗ ржирзЗржУржпрж╝рж╛ рж╣ржмрзЗ
API_ID = int(os.environ.get("API_ID", 12345))
API_HASH = os.environ.get("API_HASH", "your_api_hash")
BOT_TOKEN = os.environ.get("BOT_TOKEN", "your_bot_token")

# --- Database рж╕рзЗржЯржЖржк ---
DB_NAME = 'user_data.db'
conn = sqlite3.connect(DB_NAME, check_same_thread=False)
cursor = conn.cursor()

# ржЗржЙржЬрж╛рж░ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ (ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ)
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance REAL DEFAULT 0.00,
    referrer_id INTEGER
)
""")

# ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржЯрзЗржмрж┐рж▓ (ржпржжрж┐ ржЖржкржирж╛рж░ History ржмрж╛ржЯржи ржХрж╛ржЬ ржХрж░рж╛рждрзЗ ржЪрж╛ржи)
cursor.execute("""
CREATE TABLE IF NOT EXISTS withdrawals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    method TEXT,
    account_number TEXT,
    status TEXT DEFAULT 'Pending',
    timestamp TEXT
)
""")

conn.commit()

# --- ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзНржЯрзЗржЯ ---
# ржПржЯрж┐ ржЙржЗржержбрзНрж░ ржлрзНрж▓рзЛ ржПржмржВ ржЕржирзНржпрж╛ржирзНржп ржЯрзЗржорзНржкрзЛрж░рж╛рж░рж┐ рж╕рзНржЯрзЗржЯ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝
USER_STATE = {}

# --- тЬЕ рж╕рзНржерж┐рждрж┐рж╢рзАрж▓ ржорзЗржирзБ ржХрзАржмрзЛрж░рзНржб ржбрзЗржлрж┐ржирж┐рж╢ржи ---
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("ЁЯТ░ Daily Bonus"), KeyboardButton("ЁЯФЧ Refer & Earn")],
        [KeyboardButton("TASK-1"), KeyboardButton("TASK-2"), KeyboardButton("TASK-3")],
        [KeyboardButton("TASK-4"), KeyboardButton("TASK-5"), KeyboardButton("TASK-6")],
        [KeyboardButton("TASK-7"), KeyboardButton("TASK-8"), KeyboardButton("TASK-9")],
        [KeyboardButton("TASK-10")],
        [KeyboardButton("WITHDRAW_NOW"), KeyboardButton("My Account")],
        [KeyboardButton("ЁЯз╛ History"), KeyboardButton("Status (Admin)")]
    ],
    resize_keyboard=True
)

# --- ржХрзЛрж░ ржлрж╛ржВрж╢ржирж╛рж▓рж┐ржЯрж┐ ---
def create_user_if_not_exists(user_id, username, referrer_id=None):
    """ржпржжрж┐ ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржирж╛ ржерж╛ржХрзЗ, рждржмрзЗ ржПржХржЯрж┐ ржирждрзБржи рж░рзЗржХрж░рзНржб рждрзИрж░рж┐ ржХрж░рзЗред"""
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, username, balance, referrer_id) VALUES (?, ?, ?, ?)",
                       (user_id, username, 0.00, referrer_id))
        conn.commit()

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: /start ржХржорж╛ржирзНржб ---
@Client.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    referrer_id = None
    if len(message.command) > 1 and message.command[1].isdigit():
        referrer_id = int(message.command[1])
    
    create_user_if_not_exists(user_id, username, referrer_id)
    
    await message.reply_text(
        f"рж╕рзНржмрж╛ржЧрждржо {message.from_user.first_name}!\nржЖржкржирж┐ ржПржЦржи ржорзЗржирзБ ржерзЗржХрзЗ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред",
        reply_markup=main_menu_keyboard
    )

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: My Account ---
@Client.on_message(filters.regex("My Account") & filters.private)
async def my_account_handler(client: Client, message: Message):
    """ржЗржЙржЬрж╛рж░рзЗрж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрж╛ржпрж╝ред"""
    user_id = message.from_user.id
    cursor.execute("SELECT balance, (SELECT COUNT(*) FROM users WHERE referrer_id = ?) FROM users WHERE user_id = ?", (user_id, user_id))
    result = cursor.fetchone()
    balance = result[0] if result else 0.00
    referrals = result[1] if result else 0

    await message.reply_text(
        f"ЁЯСд **ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ рждржерзНржп:**\n"
        f"ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{balance:.2f} ржЯрж╛ржХрж╛**\n"
        f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓: **{referrals} ржЬржи**",
        reply_markup=main_menu_keyboard
    )

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: History (ржЦрзБржм рж╕рж╛ржзрж╛рж░ржг рж▓ржЬрж┐ржХ) ---
@Client.on_message(filters.regex("ЁЯз╛ History") & filters.private)
async def history_handler(client: Client, message: Message):
    user_id = message.from_user.id
    
    # ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржЪрзЗржХ ржХрж░рж╛
    cursor.execute("SELECT amount, status, timestamp FROM withdrawals WHERE user_id = ? ORDER BY id DESC LIMIT 5", (user_id,))
    withdrawals = cursor.fetchall()
    
    if not withdrawals:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return
    
    history_text = "ЁЯз╛ **ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж╣рж┐рж╕рзНржЯрж░рж┐ (рж╢рзЗрж╖ рзлржЯрж┐):**\n"
    for amount, status, timestamp in withdrawals:
        history_text += f"- **{amount:.2f} ржЯрж╛ржХрж╛** ({status}) - {timestamp.split(' ')[0]}\n"
        
    await message.reply_text(history_text)

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: Status (Admin) (ржЦрзБржм рж╕рж╛ржзрж╛рж░ржг рж▓ржЬрж┐ржХ) ---
@Client.on_message(filters.regex("Status \(Admin\)") & filters.private)
async def admin_status_handler(client: Client, message: Message):
    # ржПржЯрж┐ Admin ID ржПрж░ рж╕рж╛ржерзЗ рждрзБрж▓ржирж╛ ржХрж░рж╛рж░ ржЬржирзНржп ржЙржирзНржиржд ржХрж░рж╛ ржЙржЪрж┐рждред
    # ржЖржкрж╛рждржд ржзрж░рзЗ ржирзЗржУржпрж╝рж╛ рж╣ржЪрзНржЫрзЗ ржпрзЗ ржПржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржпрж╝ред
    await message.reply_text("ЁЯМ┐ ржЬрж░рзБрж░рж┐ ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи ЁЯМ┐\n\n[CONTACT]")

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: рж╕ржорж╕рзНржд Text ржорзЗрж╕рзЗржЬ ржХрзНржпрж╛ржЪ ржХрж░рж╛ (ржбрж┐ржлрж▓рзНржЯ ржлрж▓ржмрзНржпрж╛ржХ) ---
@Client.on_message(filters.text & filters.private, group=99)
async def process_text_messages(client: Client, message: Message):
    """ржпржжрж┐ ржХрзЛржирзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржорзЗрж╕рзЗржЬржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржирж╛ ржХрж░рзЗ, рждржмрзЗ ржПржЯрж┐ ржлрж▓ржмрзНржпрж╛ржХ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред"""
    user_id = message.from_user.id
    
    # ржЙржЗржержбрзНрж░ ржлрзНрж▓рзЛрждрзЗ ржерж╛ржХрж▓рзЗ, ржПржЗ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ржЯрж┐ ржирж┐рж╖рзНржХрзНрж░рж┐ржпрж╝ ржерж╛ржХржмрзЗ
    if USER_STATE.get(user_id):
        return
        
    text = message.text.strip().lower()
    
    # ржкрж░рж┐ржЪрж┐ржд ржмрж╛ржЯржи ржмрж╛ ржЯрж╛рж╕рзНржХ ржорзЗрж╕рзЗржЬ ржирж╛ рж╣рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ рж░рж┐ржкрзНрж▓рж╛ржЗ
    if text not in ["/start", "withdraw_now", "my account", "history", "status (admin)", "daily bonus", "refer & earn"] and not text.startswith("task-"):
        await message.reply_text("ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрж┐ржХрж▓рзНржк ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред", reply_markup=main_menu_keyboard)


# --- ржЕрзНржпрж╛ржк ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ---
app = Client(
    "earning_bot_session",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк ржПржмржВ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛ ---
if __name__ == "__main__":
    
    # ржЙржЗржержбрзНрж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк
    withdraw_handlers.setup_withdraw_handlers(app, USER_STATE, group=-1) 
    
    # рж╕ржмржХржЯрж┐ ржЯрж╛рж╕рзНржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк ржХрж░рж╛
    task_1.setup_task_handlers(app) 
    task_2.setup_task_handlers(app) 
    task_3.setup_task_handlers(app) 
    task_4.setup_task_handlers(app) 
    task_5.setup_task_handlers(app) 
    task_6.setup_task_handlers(app) 
    task_7.setup_task_handlers(app) 
    task_8.setup_task_handlers(app) 
    task_9.setup_task_handlers(app) 
    task_10.setup_task_handlers(app) 
    
    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛
    app.run()
