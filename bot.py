import os
import sqlite3
import time
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# **********************************************
# **** ржЖржкржирж╛рж░ ржЧрзЛржкржирзАржпрж╝ ржХрзА ржЧрзБрж▓рзЛ (ржЖржкржирж╛рж░ ржжрзЗржУржпрж╝рж╛ рждржерзНржп) ****
# **********************************************
API_ID = 28298245
API_HASH = "e4df3b85b3cc1c178120f2076d1685a2"
BOT_TOKEN = "8408784365:AAGdHhfFimVY30QMB1SGqFOzkyf9gbxcd-8"
OWNER_ID = 7702378694 # ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ Telegram ID (рж╕ржВржЦрзНржпрж╛) ржПржЦрж╛ржирзЗ ржмрж╕рж╛ржи
# **********************************************

# ржбрзЗржЯрж╛ржмрзЗрж╕ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
DB_NAME = 'user_data.db'

# Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи
app = Client(
    "earning_bot_session",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    # Termux-ржП ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржлрж┐ржХрзНрж╕рзЗрж░ ржЬржирзНржп in_memory ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ
    in_memory=True 
)

# --- рзз. ржбрзЗржЯрж╛ржмрзЗрж╕ ржлрж╛ржВрж╢ржи ---
def initialize_db():
    """ржбрзЗржЯрж╛ржмрзЗрж╕ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ ржХрж░рзЗ ржПржмржВ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи ржХрж░рзЗ"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0.0,
            total_earned REAL DEFAULT 0.0,
            join_date TEXT,
            last_bonus_time INTEGER DEFAULT 0,
            referred_by INTEGER DEFAULT 0,
            total_referrals INTEGER DEFAULT 0
        )
    """)
    conn.commit()
    conn.close()

def add_new_user(user_id):
    """ржирждрзБржи ржЗржЙржЬрж╛рж░ржХрзЗ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржпрзБржХрзНржд ржХрж░рзЗ"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    join_date = time.strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT OR IGNORE INTO users (user_id, join_date) VALUES (?, ?)", (user_id, join_date))
    conn.commit()
    conn.close()

def get_user_data(user_id):
    """ржЗржЙржЬрж╛рж░рзЗрж░ рж╕ржм ржбрзЗржЯрж╛ ржлрзЗржЪ ржХрж░рзЗ"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    conn.close()
    return data # (user_id, balance, total_earned, join_date, last_bonus_time, referred_by, total_referrals)

# --- рзи. ржХрзАржмрзЛрж░рзНржб ржУ UI ржлрж╛ржВрж╢ржи ---
def get_main_keyboard():
    """ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж▓рзБржХрзЗрж░ ржЬржирзНржп ржорзВрж▓ ржЗржирж▓рж╛ржЗржи ржХрзАржмрзЛрж░рзНржб"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯТ░ Daily Bonus", callback_data="daily_bonus")],
        [InlineKeyboardButton("ЁЯФЧ Refer & Earn", callback_data="refer_earn"),
         InlineKeyboardButton("ЁЯТ╝ My Account", callback_data="my_account")],
        [InlineKeyboardButton("ЁЯТ╕ Withdraw", callback_data="withdraw"),
         InlineKeyboardButton("ЁЯУИ Stats (Admin)", callback_data="admin_stats")]
    ])
    return keyboard

# --- рзй. ржмржЯрзЗрж░ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
@app.on_message(filters.command("start"))
def start_command(client, message):
    user_id = message.from_user.id
    
    # ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржЗржЙржЬрж╛рж░ржХрзЗ ржпрзБржХрзНржд ржХрж░рж╛
    add_new_user(user_id)
    
    # ржЗржЙржЬрж╛рж░ржХрзЗ рж╕рзНржмрж╛ржЧрждржо ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ
    message.reply_text(
        f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ {message.from_user.first_name}!\n\n"
        f"ржЖржорж╛ржжрзЗрж░ VIP ржЖрж░рзНржирж┐ржВ ржмржЯрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржоред ржирж┐ржЪрзЗ ржЖржкржирж╛рж░ ржЬржирзНржп ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕржкрж╢ржи ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛ:",
        reply_markup=get_main_keyboard()
    )

# --- рзк. ржХрзБржЗрж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ) ---
@app.on_callback_query()
def handle_callbacks(client, callback_query):
    data = callback_query.data
    user_id = callback_query.from_user.id
    
    # ржХрзБржЗрж░рж┐ ржЖржЗржбрж┐ ржкрзЗрж▓рзЗ, рж╕рзЗ ржЕржирзБржпрж╛ржпрж╝рзА ржЙрждрзНрждрж░ ржжрзЗржмрзЗ
    if data == "my_account":
        user_data = get_user_data(user_id)
        if user_data:
            balance = user_data[1] # ржмрзНржпрж╛рж▓рзЗржирзНрж╕
            total_ref = user_data[6] # рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛
            
            # ржПржХржЯрж┐ рж╕рзБржирзНржжрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржЯрзЗржЯрж╛рж╕ ржорзЗрж╕рзЗржЬ
            message_text = (
                "ЁЯТ╝ **ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕**\n"
                "---------------------------------------\n"
                f"ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{balance:.2f} рз│**\n"
                f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓: **{total_ref} ржЬржи**\n"
                "\n"
                "ржХржорж┐рж╢ржи ржкрзЗрждрзЗ ржЖрж░ржУ ржмрзЗрж╢рж┐ рж░рзЗржлрж╛рж░ ржХрж░рзБржи!"
            )
            callback_query.message.edit_text(message_text, reply_markup=get_main_keyboard())
        else:
            callback_query.answer("ржЖржкржирж╛рж░ ржбрзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред /start рж▓рж┐ржЦрзЗ ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржиред")

    elif data == "refer_earn":
        # рж░рзЗржлрж╛рж░рзЗрж░ рж▓рж┐ржВржХ рждрзИрж░рж┐
        ref_link = f"https://t.me/{client.me.username}?start={user_id}"
        
        message_text = (
            "ЁЯФЧ **рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи!**\n"
            "---------------------------------\n"
            "ржЖржкржирж╛рж░ ржмржирзНржзрзБржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рзБржи ржПржмржВ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржПржХржЯрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржмрзЛржирж╛рж╕ ржкрж╛ржиред\n\n"
            "тЮбя╕П **ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:**\n"
            f"`{ref_link}`\n\n"
            "ржЙржкрж░рзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рж▓рж┐ржВржХржЯрж┐ ржХржкрж┐ ржХрж░рзЗ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржиред"
        )
        callback_query.message.edit_text(message_text, reply_markup=get_main_keyboard())
        
    elif data == "daily_bonus":
        # ржПржЯрж┐ ржХрзЗржмрж▓ ржПржХржЯрж┐ ржкрзНрж▓рзЗрж╕рж╣рзЛрж▓рзНржбрж╛рж░, ржЖржкржирж┐ ржПржЦрж╛ржирзЗ ржмрзЛржирж╛рж╕ рж▓ржЬрж┐ржХ рж▓рж┐ржЦржмрзЗржи
        callback_query.answer("Daily Bonus: ржПржЗ ржлрж┐ржЪрж╛рж░ржЯрж┐ рж╢рзАржШрзНрж░ржЗ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржмрзЗ!")
        
    elif data == "withdraw":
        # ржПржЯрж┐ ржХрзЗржмрж▓ ржПржХржЯрж┐ ржкрзНрж▓рзЗрж╕рж╣рзЛрж▓рзНржбрж╛рж░
        callback_query.answer("Withdraw: ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржкрж░рзНржпрж╛ржкрзНржд ржиржпрж╝ред")
        
    elif data == "admin_stats":
        if user_id == OWNER_ID:
            callback_query.answer("Admin Stats: ржПржЗ ржлрж┐ржЪрж╛рж░ржЯрж┐ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ ржЪрж▓ржЫрзЗред")
        else:
            callback_query.answer("ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржиред", show_alert=True)
            
    else:
        callback_query.answer("ржЕржЬрж╛ржирж╛ ржЕржкрж╢ржиред")


# --- рзл. ржмржЯ рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ---
if __name__ == "__main__":
    try:
        # ржмржЯ ржЪрж▓рж╛рж░ ржЖржЧрзЗ ржбрзЗржЯрж╛ржмрзЗрж╕ рждрзИрж░рж┐ ржХрж░рзЗ ржирзЗржУржпрж╝рж╛
        initialize_db() 
        print("ржбрзЗржЯрж╛ржмрзЗрж╕ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи рж╕ржорзНржкржирзНржиред")
        print("ржмржЯ ржЪрж▓ржЫрзЗ... Termux ржЕрзНржпрж╛ржкржЯрж┐ ржмржирзНржз ржХрж░ржмрзЗржи ржирж╛!")
        app.run() # ржмржЯ рж╢рзБрж░рзБ ржХрж░рж╛
    except Exception as e:
        print(f"\nтЭМ ржмржЯ рж╢рзБрж░рзБ ржХрж░рж╛рж░ рж╕ржорзЯ рждрзНрж░рзБржЯрж┐: {e}")
        print("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ API Key ржПржмржВ BOT TOKEN рж╕ржарж┐ржХ ржЖржЫрзЗ ржХрж┐ржирж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред")
