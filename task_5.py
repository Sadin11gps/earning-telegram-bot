import sqlite3
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import datetime
import time

# --- Database & Task Status Table Setup ---
# ‡¶è‡¶ñ‡¶æ‡¶®‡ßá user_data.db ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# task_status ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø: ‡¶è‡¶ü‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ï‡ßã‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡ßã‡¶® ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶¨‡ßá ‡¶ï‡¶∞‡ßá‡¶õ‡ßá
cursor.execute("""
CREATE TABLE IF NOT EXISTS task_status (
    user_id INTEGER,
    task_name TEXT,
    completed_at TEXT,
    PRIMARY KEY (user_id, task_name)
)
""")
conn.commit()

# --- Task Specific Variables ---
TASK_NAME = "TASK-1"          # ‡¶Æ‡ßÇ‡¶≤ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
TASK_AMOUNT = 10.00           # ‡¶è‡¶á ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ßß‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞
VISIT_LINK = "https://otieu.com/4/10007498" # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
VISIT_TIME_SECONDS = 45       # 45 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ

# ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç: {user_id: start_time}
TASK_STATE = {} 

# --- Core Logic Functions ---

async def check_task_completion(user_id: int, task_name: str) -> bool:
    """
    Checks if the user has completed this task TODAY. 
    Resets at 00:00 (midnight) based on the server's local time.
    """
    # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ YYYY-MM-DD ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ
    today_date = datetime.datetime.now().strftime("%Y-%m-%d")
    
    # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ: user_id, task_name ‡¶è‡¶¨‡¶Ç completed_at ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡•§
    cursor.execute("""
        SELECT * FROM task_status 
        WHERE user_id = ? AND task_name = ? AND completed_at LIKE ?
    """, (user_id, task_name, f"{today_date}%"))
    
    return cursor.fetchone() is not None

async def reward_user_for_task(user_id: int, task_name: str, amount: float):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ü‡¶ø‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡•§"""
    
    # 1. users ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá users ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ bot.py ‡¶è ‡¶Ü‡¶õ‡ßá)
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    
    # 2. task_status ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO task_status (user_id, task_name, completed_at) VALUES (?, ?, ?)", 
                   (user_id, task_name, current_time))
    
    conn.commit()

# --- Handler Setup Function ---
def setup_task_handlers(app: Client):
    
    # ----------------------------------------------------------------------
    # Handler 1: ‡¶Æ‡ßÇ‡¶≤ TASK-1 ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá
    # ----------------------------------------------------------------------
    @app.on_message(filters.regex(f"^{TASK_NAME}$", flags=filters.re.IGNORECASE) & filters.private)
    async def task_1_initial(client: Client, message: Message):
        user_id = message.from_user.id
        
        # ‡ßß. ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ (‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
        if await check_task_completion(user_id, TASK_NAME):
            await message.reply_text(
                f"‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ **{TASK_NAME}** ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶≤ ‡ß¶‡ß¶:‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶Ø‡¶º ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
            )
            return

        # ‡ß®. ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç OPEN ‡¶¨‡¶æ‡¶ü‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÇ OPEN üìÇ", url=VISIT_LINK)],
            [InlineKeyboardButton("‚úÖ I Have Visited (Check)", callback_data="check_task_1")]
        ])
        
        await message.reply_text(
            f"üèÖ ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶ú‡¶¨ üèÖ\n"
            f"üí∞ {TASK_AMOUNT:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ\n\n"
            f"**üìú ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ:** ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç **{VISIT_TIME_SECONDS} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°** ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá **'I Have Visited (Check)'** ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n"
            f"‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶≠‡¶ô‡ßç‡¶ó ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§",
            reply_markup=keyboard
        )

    # ----------------------------------------------------------------------
    # Handler 2: 'I Have Visited (Check)' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
    # ----------------------------------------------------------------------
    @app.on_callback_query(filters.regex("check_task_1"))
    async def check_task_1_completion(client: Client, callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        
        # ‡ßß. ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶ú ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá
        if await check_task_completion(user_id, TASK_NAME):
            await callback_query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§", show_alert=True)
            return
            
        # ‡ß®. ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ (‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶° ‡¶∏‡¶ø‡¶Æ‡ßÅ‡¶≤‡ßá‡¶∂‡¶®)
        start_time = TASK_STATE.get(user_id)
        current_time = time.time()
        
        # ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶ì OPEN ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá
        if not start_time:
             await callback_query.answer("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶ó‡ßá 'OPEN' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", show_alert=True)
             return
             
        elapsed_time = current_time - start_time
        
        # ‡ß©. ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
        if elapsed_time < VISIT_TIME_SECONDS:
            remaining_time = int(VISIT_TIME_SECONDS - elapsed_time)
            
            await callback_query.answer(
                f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì {remaining_time} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
                show_alert=True
            )
            return
            
        # ‡ß™. ‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ (‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡ßá)
        await reward_user_for_task(user_id, TASK_NAME, TASK_AMOUNT)
        
        # ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ
        if user_id in TASK_STATE:
            del TASK_STATE[user_id]
        
        # ‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        await client.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.id,
            text=f"üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶™‡¶®‡¶ø **{TASK_NAME}** ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá **{TASK_AMOUNT:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\n"
                 f"‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
            reply_markup=None # ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®
        )

        await callback_query.answer("‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", show_alert=False)


    # ----------------------------------------------------------------------
    # Handler 3: Visit Link Tracking (OPEN ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá)
    # ----------------------------------------------------------------------
    @app.on_inline_keyboard_button(filters.url(VISIT_LINK))
    async def task_1_start_timer(client: Client, callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        
        if await check_task_completion(user_id, TASK_NAME):
            await callback_query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§", show_alert=True)
            return

        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ
        TASK_STATE[user_id] = time.time()
        
        await callback_query.answer(f"‡¶è‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡•§ {VISIT_TIME_SECONDS} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ü‡¶ø‡¶™‡ßÅ‡¶®‡•§", show_alert=False)

    print(f"‚úÖ Handler for {TASK_NAME} (Visit Logic) loaded.")
