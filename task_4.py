import sqlite3
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import datetime
import time

# --- Database & Task Status Table Setup ---
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# task_status ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø: ‡¶è‡¶ü‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ï‡ßã‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡ßã‡¶® ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶¨‡ßá ‡¶ï‡¶∞‡ßá‡¶õ‡ßá
cursor.execute("""
CREATE TABLE IF NOT EXISTS task_status (
    user_id INTEGER,
    task_name TEXT,
    completed_at TEXT,
    PRIMARY KEY (user_id, task_name, completed_at) 
)
""")
conn.commit()

# =========================================================
# üî¥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶á ‡ß©‡¶ü‡¶ø ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
# =========================================================
# NOTE: ‡¶è‡¶á TASK_NAME ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶∞ (‡¶Ø‡ßá‡¶Æ‡¶®: TASK-1_10 TK) ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶Ç‡¶∂‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ 
# task_1.py ‡¶§‡ßá TASK-1, task_2.py ‡¶§‡ßá TASK-2, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶π‡¶¨‡ßá‡•§
TASK_NAME = "TASK-4"          
TASK_AMOUNT = 10.00           
VISIT_LINK = "https://example.com/taskX" 
VISIT_TIME_SECONDS = 45       
# =========================================================

# ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç: {user_id: start_time}
TASK_STATE = {} 

# --- Core Logic Functions ---

async def check_task_completion(user_id: int, task_name: str) -> bool:
    """
    Checks if the user has completed this task TODAY (resets at 00:00).
    """
    today_date = datetime.datetime.now().strftime("%Y-%m-%d")
    
    cursor.execute("""
        SELECT * FROM task_status 
        WHERE user_id = ? AND task_name = ? AND completed_at LIKE ?
    """, (user_id, task_name, f"{today_date}%"))
    
    return cursor.fetchone() is not None

async def reward_user_for_task(user_id: int, task_name: str, amount: float):
    """Updates user balance and records completion."""
    
    # 1. users ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá task_balance ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    cursor.execute("UPDATE users SET task_balance = task_balance + ? WHERE user_id = ?", (amount, user_id))
    
    # 2. task_status ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO task_status (user_id, task_name, completed_at) VALUES (?, ?, ?)", 
                   (user_id, task_name, current_time))
    
    conn.commit()

# --- Handler Setup Function (CRITICAL FIX: Uses @app.on_callback_query) ---
def setup_task_handlers(app: Client):
    
    # Handler 1: START TIMER ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
    # filters.regex: start_task_x
    @app.on_callback_query(filters.regex(f"^start_{TASK_NAME.lower().replace('-', '_')}$")) 
    async def start_task_timer(client: Client, callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        
        if await check_task_completion(user_id, TASK_NAME):
            await callback_query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§", show_alert=True)
            return

        # ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
        TASK_STATE[user_id] = time.time()
        
        await callback_query.answer(f"‚è± ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! {VISIT_TIME_SECONDS} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", show_alert=True)
        
    # Handler 2: 'I Have Visited (Check)' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
    # filters.regex: check_task_x
    @app.on_callback_query(filters.regex(f"^check_{TASK_NAME.lower().replace('-', '_')}$")) 
    async def check_task_completion_handler(client: Client, callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        
        if await check_task_completion(user_id, TASK_NAME):
            await callback_query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§", show_alert=True)
            return
            
        start_time = TASK_STATE.get(user_id)
        current_time = time.time()
        
        if not start_time:
             await callback_query.answer("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶ó‡ßá 'START TIMER' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", show_alert=True)
             return
             
        elapsed_time = current_time - start_time
        
        if elapsed_time < VISIT_TIME_SECONDS:
            remaining_time = int(VISIT_TIME_SECONDS - elapsed_time)
            await callback_query.answer(f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì {remaining_time} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§", show_alert=True)
            return
            
        # ‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®
        await reward_user_for_task(user_id, TASK_NAME, TASK_AMOUNT)
        
        if user_id in TASK_STATE:
            del TASK_STATE[user_id]
        
        # ‡¶∏‡¶´‡¶≤‡¶§‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
        await client.send_message(
            chat_id=callback_query.message.chat.id,
            text=f"üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶™‡¶®‡¶ø **{TASK_NAME}** ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá **{TASK_AMOUNT:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
        )
        await callback_query.answer("‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", show_alert=False)

    # Handler 3: ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï
    # filters.regex: task_x_
    @app.on_callback_query(filters.regex(f"^{TASK_NAME.lower().replace('-', '_')}_"))
    async def show_task_inline_buttons(client: Client, callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        
        if await check_task_completion(user_id, TASK_NAME):
            await callback_query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§", show_alert=True)
            return
            
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÇ OPEN üìÇ", url=VISIT_LINK)],
            [InlineKeyboardButton("‚è± START TIMER", callback_data=f"start_{TASK_NAME.lower().replace('-', '_')}")],
            [InlineKeyboardButton("‚úÖ I Have Visited (Check)", callback_data=f"check_{TASK_NAME.lower().replace('-', '_')}")] 
        ])

        await callback_query.edit_message_text(
            f"üèÖ **{TASK_NAME} - ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶ú‡¶¨** üèÖ\n"
            f"üí∞ {TASK_AMOUNT:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ\n\n"
            f"**üìú ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ:** ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®, **'START TIMER'** ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®, **{VISIT_TIME_SECONDS} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°** ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç **'Check'** ‡¶ü‡¶ø‡¶™‡ßÅ‡¶®‡•§",
            reply_markup=keyboard
        )
        await callback_query.answer("‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    
    print(f"‚úÖ Handler for {TASK_NAME} loaded.")
