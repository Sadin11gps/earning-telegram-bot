from pyrogram import Client, filters
import sqlite3

# ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()
OWNER_ID = 7702378694 # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶á‡¶°‡¶ø

# --- ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ---
def is_user_blocked(user_id):
    cursor.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    if data and data[0] == 1:
        return True
    return False

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def setup_admin_handlers(app: Client):
    
    # -----------------------------
    # /block <user_id>
    # -----------------------------
    @app.on_message(filters.command("block") & filters.private)
    async def block_user_command(client, message):
        if message.from_user.id != OWNER_ID: return

        try:
            user_id_to_block = int(message.command[1])
            cursor.execute("UPDATE users SET is_blocked = 1 WHERE user_id = ?", (user_id_to_block,))
            conn.commit()
            
            await client.send_message(user_id_to_block, "‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
            await message.reply_text(f"‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ `{user_id_to_block}` ‡¶ï‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        except:
            await message.reply_text("‚ùå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/block <user_id>`")

    # -----------------------------
    # /unblock <user_id>
    # -----------------------------
    @app.on_message(filters.command("unblock") & filters.private)
    async def unblock_user_command(client, message):
        if message.from_user.id != OWNER_ID: return

        try:
            user_id_to_unblock = int(message.command[1])
            cursor.execute("UPDATE users SET is_blocked = 0 WHERE user_id = ?", (user_id_to_unblock,))
            conn.commit()
            
            await client.send_message(user_id_to_unblock, "‚úÖ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶®‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
            await message.reply_text(f"‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ `{user_id_to_unblock}` ‡¶ï‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶®‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        except:
            await message.reply_text("‚ùå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/unblock <user_id>`")

    # -----------------------------
    # /withdraws (‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã)
    # -----------------------------
    @app.on_message(filters.command("withdraws") & filters.private)
    async def list_pending_withdraws(client, message):
        if message.from_user.id != OWNER_ID: return

        cursor.execute(
            "SELECT id, user_id, amount, method, account_number, timestamp FROM withdraw_history WHERE status = 'Pending' ORDER BY timestamp ASC"
        )
        pending_withdraws = cursor.fetchall()
        
        if not pending_withdraws:
            await message.reply_text("üéâ ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§")
            return

        response = "‚è≥ **‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü**\n\n"
        for item in pending_withdraws:
            (w_id, user_id, amount, method, number, timestamp) = item
            
            # Approve/Reject ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("‚úÖ Approve", callback_data=f"w_approve_{w_id}"),
                        InlineKeyboardButton("‚ùå Reject", callback_data=f"w_reject_{w_id}")
                    ]
                ]
            )
            
            response += (
                f"**ID: {w_id}** (‡¶á‡¶â‡¶ú‡¶æ‡¶∞: `{user_id}`)\n"
                f"üí∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: {amount:.2f} ‡ß≥ (‡¶®‡ßá‡¶ü)\n"
                f"üè¶ ‡¶Æ‡ßá‡¶•‡¶°: {method} - `{number}`\n"
                f"üìÖ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü: {timestamp[:16]}\n"
            )
            
            await message.reply_text(response, reply_markup=keyboard)
            response = "--------------------------------------\n" # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ

    # -----------------------------
    # ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (Approve/Reject)
    # -----------------------------
    @app.on_callback_query(filters.regex("^(w_approve_|w_reject_)"))
    async def handle_withdraw_action(client, callback_query):
        if callback_query.from_user.id != OWNER_ID: 
            await callback_query.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§")
            return
            
        action, w_id_str = callback_query.data.split('_', 1)
        w_id = int(w_id_str)
        status = "Approved" if action == "w_approve" else "Rejected"
        
        cursor.execute("SELECT user_id, amount, status FROM withdraw_history WHERE id = ?", (w_id,))
        withdraw_data = cursor.fetchone()
        
        if not withdraw_data:
            await callback_query.edit_message_text("‚ùå ‡¶è‡¶á ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
            return

        user_id, net_amount, current_status = withdraw_data
        
        if current_status != 'Pending':
            await callback_query.edit_message_text(f"‚ùå ‡¶è‡¶á ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á {current_status} ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
            return

        cursor.execute("UPDATE withdraw_history SET status = ? WHERE id = ?", (status, w_id))
        
        # ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§
        if status == "Rejected":
            # ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ Referral Balance ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º)
            # ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡ßá‡¶ü ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø (‡¶Ø‡¶æ‡¶§‡ßá ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá ‡¶¨‡¶ø‡¶≠‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§‡¶ø ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º)
            cursor.execute("UPDATE users SET task_balance = task_balance + ? WHERE user_id = ?", (net_amount, user_id))
            conn.commit()
            
            # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ
            await client.send_message(user_id, f"‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **{net_amount:.2f} ‡ß≥** ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ **‡¶¨‡¶æ‡¶§‡¶ø‡¶≤** ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
            await callback_query.edit_message_text(f"‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ID {w_id} ({net_amount:.2f} ‡ß≥) ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

        # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶π‡¶≤‡ßá 
        else:
            conn.commit()
            await client.send_message(user_id, f"‚úÖ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **{net_amount:.2f} ‡ß≥** ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ **‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®** ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
            await callback_query.edit_message_text(f"‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ID {w_id} ({net_amount:.2f} ‡ß≥) ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

        await callback_query.answer(f"‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ID {w_id} {status}")
