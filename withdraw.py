from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardMarkup, 
    KeyboardButton
)
import sqlite3
import os

# ржЧрзНрж▓рзЛржмрж╛рж▓ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржПржмржВ ржлрж╛ржВрж╢ржи ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржкрзНрж▓рзЗрж╕рж╣рзЛрж▓рзНржбрж╛рж░
MIN_WITHDRAW = 1500.00
WITHDRAW_FEE_PERCENT = 10.0
OWNER_ID = 7702378694

# ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛
REQUIRED_REFERRALS = 20

# ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзЗржЯ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
USER_STATE = {}

# --- ржлрж╛ржВрж╢ржи: ржЗржЙржЬрж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржПржмржВ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛ ржЪрзЗржХ ржХрж░рж╛ ---
def get_user_data(user_id):
    cursor.execute("SELECT task_balance, referral_balance, referral_count FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    if data:
        return data[0] + data[1], data[2] # (ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕, рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛)
    return 0.00, 0

# --- ржХрзАржмрзЛрж░рзНржб: ржЙржЗржержбрзНрж░ ржорзЗржержб ржмрж╛ржЯржи ---
withdraw_method_keyboard = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton("ЁЯПж BKASH", callback_data="w_method_BKASH"),
            InlineKeyboardButton("ЁЯПж NAGAD", callback_data="w_method_NAGAD")
        ]
    ]
)

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ЁЯТ│ Withdraw (рж╕рзНржЯрзЗржк рзз: ржЙржЗржержбрзНрж░ рж╢рзБрж░рзБ ржХрж░рж╛) ---
def setup_withdraw_handlers(app, USER_STATE_REF):
    global USER_STATE
    USER_STATE = USER_STATE_REF

    @app.on_message(filters.regex("ЁЯТ│ Withdraw"))
    async def withdraw_start(client, message):
        user_id = message.from_user.id
        
        total_balance, referral_count = get_user_data(user_id)
        
        # 1. рж╕рж░рзНржмржирж┐ржорзНржи рж▓рж┐ржорж┐ржЯ ржПржмржВ рж░рзЗржлрж╛рж░рзЗрж▓ рж╢рж░рзНржд ржжрзЗржЦрж╛ржи
        text = (
            "ЁЯТм **рж╕ржарж┐ржХржнрж╛ржмрзЗ Withdraw ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ method + account number ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржЪрзЗржХ ржХрж░рзЗ ржжрж┐ржи**\n\n"
            f"ЁЯПж MINIMUM WITHDRAW: **{MIN_WITHDRAW:.2f} TK**\n"
            f"ЁЯЦМя╕П FEE : **{WITHDRAW_FEE_PERCENT:.0f}%**\n\n"
            f"ЁЯУЬ Tip: ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп **{REQUIRED_REFERRALS} ржЯрж┐ рж░рзЗржлрж╛рж░** ржкрзНрж░ржпрж╝рзЛржЬржиред (ржмрж░рзНрждржорж╛ржирзЗ ржЖржкржирж╛рж░ ржЖржЫрзЗ: **{referral_count} ржЬржи**)\n\n"
            "тЬ│я╕П **ржЖржкржирж┐ ржХрж┐рж╕рзЗрж░ ржорж╛ржзрзНржпржорзЗ Withdraw ржХрж░рждрзЗ ржЪрж╛ржи?** тЬ│я╕П"
        )
        
        # ржкрзНрж░рж╛ржержорж┐ржХ ржЪрзЗржХ: ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржмрж╛ рж░рзЗржлрж╛рж░рзЗрж▓ рж╢рж░рзНржд ржкрзВрж░ржг ржирж╛ рж╣рж▓рзЗ рж╢рзБрж░рзБ ржХрж░рж╛ рж╣ржмрзЗ ржирж╛
        if total_balance < MIN_WITHDRAW:
            await message.reply_text(
                f"тЭМ ржжрзБржГржЦрж┐ржд! ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ рж╕рж░рзНржмржирж┐ржорзНржи **{MIN_WITHDRAW:.2f} ржЯрж╛ржХрж╛** ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерж╛ржХрж╛ ржжрж░ржХрж╛рж░ред\n"
                f"ржмрж░рзНрждржорж╛ржирзЗ ржЖржЫрзЗ: **{total_balance:.2f} ржЯрж╛ржХрж╛**"
            )
            return
        
        if referral_count < REQUIRED_REFERRALS:
            await message.reply_text(
                f"тЭМ ржжрзБржГржЦрж┐ржд! ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ **{REQUIRED_REFERRALS} ржЯрж┐ рж░рзЗржлрж╛рж░** ржерж╛ржХрж╛ ржжрж░ржХрж╛рж░ред\n"
                f"ржмрж░рзНрждржорж╛ржирзЗ ржЖржкржирж╛рж░ ржЖржЫрзЗ: **{referral_count} ржЬржи**ред ржЖрж░ржУ рж░рзЗржлрж╛рж░ ржХрж░рзБржиред"
            )
            return

        # 2. рж╢рж░рзНржд ржкрзВрж░ржг рж╣рж▓рзЗ, ржкрзНрж░рж╕рзЗрж╕ рж╢рзБрж░рзБ ржХрж░рж╛
        USER_STATE[user_id] = {'step': 'started', 'amount': 0, 'method': '', 'number': ''}
        await message.reply_text(text, reply_markup=withdraw_method_keyboard)

    # --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ржХрзНржпрзЛржпрж╝рж╛рж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (рж╕рзНржЯрзЗржк рзи: ржорзЗржержб ржирж┐рж░рзНржмрж╛ржЪржи) ---
    @app.on_callback_query(filters.regex("^w_method_"))
    async def withdraw_method_select(client, callback_query):
        user_id = callback_query.from_user.id
        method = callback_query.data.split('_')[-1]
        
        if USER_STATE.get(user_id) and USER_STATE[user_id]['step'] == 'started':
            USER_STATE[user_id]['method'] = method
            USER_STATE[user_id]['step'] = 'awaiting_number'
            
            # 1. ржорзЗрж╕рзЗржЬ ржПржбрж┐ржЯ ржХрж░рж╛ (ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржЪрж▓рзЗ ржпрж╛ржмрзЗ)
            await callback_query.edit_message_text(
                f"тЬЕ ржЖржкржирж┐ **{method}** ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржиред\n"
                f"ЁЯЦМя╕П **ржЖржкржирж╛рж░ {method} ржирж╛ржорзНржмрж╛рж░ржЯрж┐ рж▓рж┐ржЦрзБржиред ЁЯСЗ**"
            )
            
            await callback_query.answer("ржиржорзНржмрж░ рж▓рж┐ржЦрзБржиред")
            
        else:
            await callback_query.answer("тЭМ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ ржкрзНрж░рж╕рзЗрж╕ржЯрж┐ ржмрж╛рждрж┐рж▓ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
            # ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рждрзЗ рж╕рзНржЯрзЗржЯ ржХрзНрж▓рж┐ржпрж╝рж╛рж░
            if user_id in USER_STATE: del USER_STATE[user_id]


    # --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ржЙржЗржержбрзНрж░ ржирж╛ржорзНржмрж╛рж░ ржПржмржВ ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ ржирзЗржУржпрж╝рж╛ (рж╕рзНржЯрзЗржк рзй ржПржмржВ рзк) ---
    @app.on_message(filters.text & filters.private, group=1) # High Priority
    async def withdraw_details_process(client, message):
        user_id = message.from_user.id
        user_input = message.text
        
        if user_id not in USER_STATE:
            return False # ржЕржирзНржп рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзЗ ржЫрзЗржбрж╝рзЗ ржжрж╛ржУ
            
        current_state = USER_STATE[user_id]
        total_balance, referral_count = get_user_data(user_id)


        if current_state['step'] == 'awaiting_number':
            # рж╕рзНржЯрзЗржк рзй: ржиржорзНржмрж░ ржЗржиржкрзБржЯ
            account_number = user_input.strip()
            
            if not account_number.isdigit() or len(account_number) < 11:
                await message.reply_text("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз рззрзз-рж╕ржВржЦрзНржпрж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░ ржжрж┐ржиред")
                return True
                
            USER_STATE[user_id]['number'] = account_number
            USER_STATE[user_id]['step'] = 'awaiting_amount'
            
            await message.reply_text(
                f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{total_balance:.2f}рз│**\n"
                f"тЬНя╕П **ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржиред ЁЯСЗ**"
            )
            return True
            
        elif current_state['step'] == 'awaiting_amount':
            # рж╕рзНржЯрзЗржк рзк: ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ ржЗржиржкрзБржЯ ржУ ржлрж╛ржЗржирж╛рж▓ рж╕рж╛ржмржорж┐ржЯ
            
            try:
                amount = float(user_input)
            except ValueError:
                await message.reply_text("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ржпрж╝ ржЯрж╛ржХрж╛рж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржиред")
                return True
                
            # 1. ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржо ржЖржЫрзЗ?
            if amount < MIN_WITHDRAW:
                await message.reply_text(f"тЫФ ржЖржкржирж╛рж░ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рж╛ ржЯрж╛ржХрж╛рж░ ржкрж░рж┐ржорж╛ржг рж╕рж░рзНржмржирж┐ржорзНржи рж╕рзАржорж╛ **{MIN_WITHDRAW:.2f} ржЯрж╛ржХрж╛** ржПрж░ ржЪрзЗржпрж╝рзЗ ржХржоред")
                return True
                
            if amount > total_balance:
                await message.reply_text(f"тЫФ **ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржо ржЖржЫрзЗред** ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{total_balance:.2f}рз│**ред")
                return True
            
            # 2. рж░рзЗржлрж╛рж░рзЗрж▓ рж╢рж░рзНржд ржкрзВрж░ржг ржирж╛ рж╣рж▓рзЗ?
            if referral_count < REQUIRED_REFERRALS:
                await message.reply_text(f"тЭМ ржжрзБржГржЦрж┐ржд! ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ **{REQUIRED_REFERRALS} ржЯрж┐ рж░рзЗржлрж╛рж░** ржерж╛ржХрж╛ ржжрж░ржХрж╛рж░ред\n"
                                         f"ЁЯУЬ Tip: ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп **{REQUIRED_REFERRALS} ржЯрж┐ рж░рзЗржлрж╛рж░** ржкрзНрж░ржпрж╝рзЛржЬржиред")
                return True

            # --- ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ржкрзНрж░рж╕рзЗрж╕рж┐ржВ (рж╢рж░рзНржд ржкрзВрж░ржг рж╣ржпрж╝рзЗржЫрзЗ) ---
            fee = (amount * WITHDRAW_FEE_PERCENT) / 100
            net_amount = amount - fee
            method = current_state['method']
            account_number = current_state['number']
            
            # ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерзЗржХрзЗ ржЯрж╛ржХрж╛ ржХрж╛ржЯрж╛ (Task Balance ржПржмржВ Referral Balance ржерзЗржХрзЗ)
            cursor.execute("SELECT task_balance, referral_balance FROM users WHERE user_id = ?", (user_id,))
            task_bal, ref_bal = cursor.fetchone()
            
            remaining_to_cut = amount
            new_task_bal = task_bal
            new_ref_bal = ref_bal
            
            if task_bal >= remaining_to_cut:
                new_task_bal = task_bal - remaining_to_cut
            else:
                new_task_bal = 0
                remaining_to_cut -= task_bal
                new_ref_bal = ref_bal - remaining_to_cut

            # Database ржП ржЖржкржбрзЗржЯ ржУ History ржпрзЛржЧ
            cursor.execute("UPDATE users SET task_balance = ?, referral_balance = ? WHERE user_id = ?", 
                           (new_task_bal, new_ref_bal, user_id))
            cursor.execute("INSERT INTO withdraw_history (user_id, amount, method, account_number) VALUES (?, ?, ?, ?)",
                           (user_id, net_amount, method, account_number))
            conn.commit()
            
            # ржЗржЙржЬрж╛рж░ржХрзЗ ржлрж╛ржЗржирж╛рж▓ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи
            final_text = (
                f"ЁЯФФ **Notifications**\n\n"
                f"ЁЯФВ ржЖржкржирж╛рж░ Withdraw **{net_amount:.2f} рз│** ({method}: {account_number}) ржкрзЗржирзНржбрж┐ржВ ржЖржЫрзЗ...\n"
                f"ЁЯЩП ржжржпрж╝рж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред\n"
                f"ЁЯОЯя╕П ржПржбржорж┐ржи ржЪрзЗржХ ржХрж░рж╛рж░ ржкрж░ Approve ржХрж░ржмрзЗржи\n"
                f"ЁЯТХ **ржзржирзНржпржмрж╛ржж** ЁЯТХ"
            )
            await message.reply_text(final_text)
            
            # ржПржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рж╛
            admin_message = (
                f"ЁЯФФ **ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ (Pending)**\n"
                f"ЁЯСд ржЗржЙржЬрж╛рж░ ID: `{user_id}`\n"
                f"ЁЯТ░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: **{amount:.2f} рз│** (ржирзЗржЯ: {net_amount:.2f} рз│)\n"
                f"ЁЯПж ржорзЗржержб: {method}\n"
                f"ЁЯФв ржиржорзНржмрж░: {account_number}\n"
                f"ЁЯСЙ ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓ ржерзЗржХрзЗ `/withdraws` ржХржорж╛ржирзНржб ржжрж┐ржпрж╝рзЗ ржЕржирзБржорзЛржжржи ржХрж░рзБржиред"
            )
            await client.send_message(OWNER_ID, admin_message)
            
            # рж╕рзНржЯрзЗржЯ ржХрзНрж▓рж┐ржпрж╝рж╛рж░ ржХрж░рж╛
            del USER_STATE[user_id]
            return True
            
        return False
