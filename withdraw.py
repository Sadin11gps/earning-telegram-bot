import sqlite3
from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton

# --- Database рж╕рзЗржЯржЖржк (bot.py-ржПрж░ рж╕рж╛ржерзЗ рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржг) ---
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# --- ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзНржЯрзЗржЯ ---
USER_STATE = {} 

# --- ржмрзНржпржмрж╕рж╛ржпрж╝рж┐ржХ рж▓ржЬрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ (bot.py ржерзЗржХрзЗ ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржХрж░рж╛) ---
MIN_WITHDRAW = 1500.00       
REQUIRED_REFERRALS = 20      
WITHDRAW_FEE_PERCENT = 10.0  
OWNER_ID = 7702378694 # Admin ID 


# --- ржХрзАржмрзЛрж░рзНржб рж╕рзЗржЯржЖржк ---
withdraw_method_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("BKASH"), KeyboardButton("NAGAD")],
        [KeyboardButton("CANCEL")]
    ],
    resize_keyboard=True
)

# ржорзВрж▓ ржорзЗржирзБрж░ ржмрж╛ржЯржи (Reply Keyboard) - WITHDRAW_NOW ржлрж┐ржХрзНрж╕ржб
    [
        [KeyboardButton("ЁЯТ░ Daily Bonus"), KeyboardButton("ЁЯФЧ Refer & Earn")],
        # ржлрж┐ржХрзНрж╕ржб: ржЗржорзЛржЬрж┐ ржЫрж╛ржбрж╝рж╛ рж╢рзБржзрзБ 'Withdraw' ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
        [KeyboardButton("WITHRAW_NOW"), KeyboardButton("ЁЯСд My Account")],
        [KeyboardButton("ЁЯз╛ History"), KeyboardButton("ЁЯСС Status (Admin)")]
    ],
    resize_keyboard=True
)


# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк ржлрж╛ржВрж╢ржи ---
def setup_withdraw_handlers(app: Client, shared_user_state):
    global USER_STATE
    USER_STATE = shared_user_state
    
    
    # -----------------------------------------------------
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рзз: Withdraw ржХржорж╛ржирзНржб рж╢рзБрж░рзБ (ULTIMATE FIX: Case-Insensitive)
    # -----------------------------------------------------
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржПржЦржи "Withdraw" рж╢ржмрзНржжржЯрж┐ржХрзЗ (ржХрзЗрж╕ ржЗржЧржирзЛрж░ ржХрж░рзЗ) ржзрж░рзЗ
    @app.on_message(filters.regex("WITHDRAW_NOW", flags=filters.re.IGNORECASE) & filters.private) 
    async def withdraw_start(client, message):
        
        # *** ржЪрзВржбрж╝рж╛ржирзНржд ржлрж┐ржХрзНрж╕ ***
        # ржпржжрж┐ ржорзЗрж╕рзЗржЬ ржЯрзЗржХрзНрж╕ржЯржЯрж┐ 'WIYHDRAW 3' ржПрж░ рж╕ржорж╛ржи ржирж╛ рж╣ржпрж╝ (ржХрзЗрж╕ ржЗржЧржирзЛрж░ ржХрж░рзЗ), рждржмрзЗ рж╕рж╛ржЗрж▓рзЗржирзНржЯрж▓рж┐ ржмрзЗрж░ рж╣ржпрж╝рзЗ ржпрж╛ржУред
        if message.text.strip().lower() != "withdraw":
            return
            
        user_id = message.from_user.id
        
        # 1. ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржПржмржВ рж░рзЗржлрж╛рж░ ржЪрзЗржХ
        cursor.execute("SELECT task_balance, referral_balance, referral_count FROM users WHERE user_id = ?", (user_id,))
        data = cursor.fetchone()
        
        if data is None:
            await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржХржорж╛ржирзНржб ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред", reply_markup=main_menu_keyboard)
            return

        task_balance, referral_balance, ref_count = data
        total_balance = task_balance + referral_balance
        
        error_message = ""
        if total_balance < MIN_WITHDRAW:
            error_message += f"тЭМ ржжрзБржГржЦрж┐ржд! ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ рж╕рж░рзНржмржирж┐ржорзНржи **{MIN_WITHDRAW:.2f} ржЯрж╛ржХрж╛** ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерж╛ржХрж╛ ржжрж░ржХрж╛рж░ред\n"
        
        if ref_count < REQUIRED_REFERRALS:
            error_message += f"тЭМ ржжрзБржГржЦрж┐ржд! ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ **{REQUIRED_REFERRALS} ржЯрж┐ рж░рзЗржлрж╛рж░** ржерж╛ржХрж╛ ржжрж░ржХрж╛рж░ред\n"
        
        if error_message:
            # рж╢рж░рзНржд ржкрзВрж░ржг ржирж╛ рж╣рж▓рзЗ ржнрзБрж▓ ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж┐ржпрж╝рзЗ ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рж┐ржпрж╝рзЗ ржжрж┐ржи
            await message.reply_text(error_message, reply_markup=main_menu_keyboard)
            
        else:
            # 2. рж╢рж░рзНржд ржкрзВрж░ржг рж╣рж▓рзЗ ржЙржЗржержбрзНрж░ ржкрзНрж░рж╕рзЗрж╕ рж╢рзБрж░рзБ
            USER_STATE[user_id] = 'asking_withdraw_amount'
            await message.reply_text(
                f"тЬЕ ржЖржкржирж┐ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржпрзЛржЧрзНржп!\n"
                f"ЁЯТ╕ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{total_balance:.2f} ржЯрж╛ржХрж╛**ред\n\n"
                f"тЪая╕П **ржЙрждрзНрждрзЛрж▓ржи ржлрж┐: {WITHDRAW_FEE_PERCENT:.1f}%**\n"
                f"ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржкрж░рж┐ржорж╛ржг ржирж┐ржЪрзЗ рж▓рж┐ржЦрзБржиред (рж╕рж░рзНржмржирж┐ржорзНржи {MIN_WITHDRAW:.2f} ржЯрж╛ржХрж╛)",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("CANCEL")]
                ], resize_keyboard=True)
            )

    # -----------------------------------------------------
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рзи: ржЙржЗржержбрзНрж░ ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ ржЗржиржкрзБржЯ
    # -----------------------------------------------------
    @app.on_message(filters.text & filters.private & ~filters.regex("^(BKASH|NAGAD|CANCEL|Daily Bonus|Refer & Earn|Withdraw|My Account|History|Status \(Admin\))$", flags=filters.re.IGNORECASE))
    async def process_withdraw_amount(client, message):
        user_id = message.from_user.id
        
        if USER_STATE.get(user_id) == 'asking_withdraw_amount':
            try:
                amount = float(message.text)
                
                cursor.execute("SELECT task_balance, referral_balance FROM users WHERE user_id = ?", (user_id,))
                data = cursor.fetchone()
                total_balance = data[0] + data[1]

                if amount < MIN_WITHDRAW:
                    await message.reply_text(f"тЭМ ржЙржЗржержбрзНрж░ ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ рж╕рж░рзНржмржирж┐ржорзНржи **{MIN_WITHDRAW:.2f} ржЯрж╛ржХрж╛** рж╣рждрзЗ рж╣ржмрзЗред ржЖржмрж╛рж░ рж▓рж┐ржЦрзБржиред")
                elif amount > total_balance:
                    await message.reply_text(f"тЭМ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржирзЗржЗред ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{total_balance:.2f} ржЯрж╛ржХрж╛**ред")
                else:
                    USER_STATE[user_id] = 'asking_withdraw_method'
                    USER_STATE[f'{user_id}_withdraw_amount'] = amount 
                    
                    final_amount = amount - (amount * WITHDRAW_FEE_PERCENT / 100)
                    
                    await message.reply_text(
                        f"ЁЯТ░ ржЖржкржирж┐ **{amount:.2f} ржЯрж╛ржХрж╛** ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ ржЪрзЗржпрж╝рзЗржЫрзЗржиред\n"
                        f"ржлрж┐ ({WITHDRAW_FEE_PERCENT:.1f}%): **{(amount * WITHDRAW_FEE_PERCENT / 100):.2f} ржЯрж╛ржХрж╛**ред\n"
                        f"тЬЕ ржЖржкржирж┐ ржкрж╛ржмрзЗржи: **{final_amount:.2f} ржЯрж╛ржХрж╛**ред\n\n"
                        "ржЖржкржирж┐ ржХрзЛржи ржорзЗржержбрзЗ ржЯрж╛ржХрж╛ ржирж┐рждрзЗ ржЪрж╛ржи, рждрж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
                        reply_markup=withdraw_method_keyboard
                    )

            except ValueError:
                await message.reply_text("тЭМ рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред рж╕ржарж┐ржХ ржкрж░рж┐ржорж╛ржг ржЖржмрж╛рж░ рж▓рж┐ржЦрзБржиред")

    # -----------------------------------------------------
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рзй: ржорзЗржержб ржЗржиржкрзБржЯ
    # -----------------------------------------------------
    @app.on_message(filters.regex("^(BKASH|NAGAD)$") & filters.private)
    async def process_withdraw_method(client, message):
        user_id = message.from_user.id
        
        if USER_STATE.get(user_id) == 'asking_withdraw_method':
            method = message.text
            USER_STATE[user_id] = 'asking_account_number'
            USER_STATE[f'{user_id}_withdraw_method'] = method 
            await message.reply_text(
                f"ржЖржкржирж┐ **{method}** ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржиред\n"
                f"ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ {method} **ржирж╛ржорзНржмрж╛рж░ржЯрж┐** рж▓рж┐ржЦрзБржи:"
            )

    # -----------------------------------------------------
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рзк: ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржирж╛ржорзНржмрж╛рж░ ржЗржиржкрзБржЯ
    # -----------------------------------------------------
    @app.on_message(filters.text & filters.private & ~filters.regex("^(BKASH|NAGAD|CANCEL|Daily Bonus|Refer & Earn|Withdraw|My Account|History|Status \(Admin\))$", flags=filters.re.IGNORECASE))
    async def process_account_number(client, message):
        user_id = message.from_user.id
        
        if USER_STATE.get(user_id) == 'asking_account_number':
            account_number = message.text
            
            # --- ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржорж╛ржирзЛ ржПржмржВ ржЗрждрж┐рж╣рж╛рж╕ рж╕ржВрж░ржХрзНрж╖ржг ---
            amount = USER_STATE.pop(f'{user_id}_withdraw_amount', 0)
            method = USER_STATE.pop(f'{user_id}_withdraw_method', 'N/A')
            USER_STATE.pop(user_id) # рж╕рзНржЯрзЗржЯ рж░рж┐рж╕рзЗржЯ

            if amount == 0:
                 await message.reply_text("тЭМ ржЙржЗржержбрзНрж░ ржкрзНрж░рж╕рзЗрж╕ржЯрж┐ ржкрзБржирж░рж╛ржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржи (ржбрзЗржЯрж╛ рждрзНрж░рзБржЯрж┐)ред", reply_markup=main_menu_keyboard)
                 return

            final_amount = amount - (amount * WITHDRAW_FEE_PERCENT / 100)
            
            cursor.execute("SELECT task_balance, referral_balance FROM users WHERE user_id = ?", (user_id,))
            t_bal, r_bal = cursor.fetchone()
            
            remaining_amount = amount
            if t_bal >= remaining_amount:
                t_bal -= remaining_amount
                remaining_amount = 0
            else:
                remaining_amount -= t_bal
                t_bal = 0
                r_bal -= remaining_amount 
                
            cursor.execute("UPDATE users SET task_balance = ?, referral_balance = ? WHERE user_id = ?", (t_bal, r_bal, user_id))
            conn.commit()
            
            cursor.execute(
                "INSERT INTO withdraw_history (user_id, amount, method, account_number, status) VALUES (?, ?, ?, ?, ?)",
                (user_id, amount, method, account_number, 'Pending')
            )
            conn.commit()
            
            # 3. ржЗржЙржЬрж╛рж░ржХрзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛
            await message.reply_text(
                f"тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕рж╛ржмржорж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n"
                f"ЁЯТ░ ржЙржЗржержбрзНрж░ ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ: {amount:.2f} ржЯрж╛ржХрж╛\n"
                f"ЁЯПж ржорзЗржержб: {method}\n"
                f"ЁЯФв ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ: {account_number}\n"
                f"тП▒я╕П ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ рж╢рзАржШрзНрж░ржЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржмрзЗред",
                reply_markup=main_menu_keyboard
            )
            
            # 4. ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржЬрж╛ржирж╛ржирзЛ
            await client.send_message(
                OWNER_ID,
                f"ЁЯФФ **ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ**\n"
                f"ЁЯЖФ User ID: `{user_id}`\n"
                f"ЁЯСд User: @{message.from_user.username or 'N/A'}\n"
                f"ЁЯТ░ Amount: {amount:.2f} ржЯрж╛ржХрж╛\n"
                f"ЁЯТ╕ Net Receive: {final_amount:.2f} ржЯрж╛ржХрж╛ (ржлрж┐ {WITHDRAW_FEE_PERCENT:.1f}%)\n"
                f"ЁЯПж Method: {method}\n"
                f"ЁЯФв Account: {account_number}"
            )
            
    # -----------------------------------------------------
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рзл: CANCEL ржХржорж╛ржирзНржб
    # -----------------------------------------------------
    @app.on_message(filters.regex("CANCEL") & filters.private)
    async def withdraw_cancel(client, message):
        user_id = message.from_user.id
        
        if user_id in USER_STATE:
            USER_STATE.pop(user_id, None)
            USER_STATE.pop(f'{user_id}_withdraw_amount', None)
            USER_STATE.pop(f'{user_id}_withdraw_method', None)
            await message.reply_text("тЭМ ржЙржЗржержбрзНрж░ ржкрзНрж░рж╕рзЗрж╕ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", reply_markup=main_menu_keyboard)
