import sqlite3
import datetime
from pyrogram import Client, filters
from pyrogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# --- Database ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (bot.py-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£) ---
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# --- ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ---
MIN_WITHDRAW = 1500.00
REQUIRED_REFERRALS = 20
WITHDRAW_FEE_PERCENT = 10.0
OWNER_ID = 7702378694 # Admin ID (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Telegram ID ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®)

# --- ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
withdraw_method_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("BKASH"), KeyboardButton("NAGAD")],
        [KeyboardButton("CANCEL")]
    ],
    resize_keyboard=True
)

# --- Handler Setup Function ---
def setup_withdraw_handlers(app: Client, shared_user_state: dict, group: int):
    
    # --- Handler 1: ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ (WITHDRAW_NOW) ---
    @app.on_message(filters.regex("WITHDRAW_NOW", flags=filters.re.IGNORECASE) & filters.private, group=group) 
    async def withdraw_start(client: Client, message: Message):
        user_id = message.from_user.id
        
        # ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ö‡ßá‡¶ï (DEBUG ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
        await message.reply_text("‚úÖ WITHDRAW HANDLER CALLED. Checking balance...") 
        
        # ‡ßß. ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
        cursor.execute("SELECT balance, (SELECT COUNT(*) FROM users WHERE referrer_id = ?) AS referrals FROM users WHERE user_id = ?", (user_id, user_id))
        result = cursor.fetchone()
        
        if not result:
            await message.reply_text("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§")
            return
            
        balance, referrals = result
        can_withdraw = True
        response_text = "‚ö†Ô∏è **‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶∂‡¶∞‡ßç‡¶§‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá:**\n"
        
        if balance < MIN_WITHDRAW:
            can_withdraw = False
            response_text += f"‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® **{MIN_WITHDRAW:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§\n"
            
        if referrals < REQUIRED_REFERRALS:
            can_withdraw = False
            response_text += f"‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá **{REQUIRED_REFERRALS} ‡¶ü‡¶ø ‡¶∞‡ßá‡¶´‡¶æ‡¶∞** ‡¶•‡¶æ‡¶ï‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§\n"

        if not can_withdraw:
            # ‡¶Ø‡¶¶‡¶ø ‡¶∂‡¶∞‡ßç‡¶§ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º
            await message.reply_text(response_text)
            return
        
        # ‡ß®. ‡¶Ø‡¶¶‡¶ø ‡¶∂‡¶∞‡ßç‡¶§ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶π‡¶Ø‡¶º, ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ
        shared_user_state[user_id] = {'step': 'awaiting_amount', 'balance': balance}
        
        await message.reply_text(
            f"üéâ **‡¶∂‡¶∞‡ßç‡¶§ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!** ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§\n"
            f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® {MIN_WITHDRAW:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n\n"
            f"üí∞ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("CANCEL")]
            ], resize_keyboard=True)
        )

    # --- Handler 2: ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ---
    # ‡¶è‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ß‡¶∞‡ßá, ‡¶Ø‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶æ‡¶ü‡¶® ‡¶®‡¶Ø‡¶º, ‡¶Ø‡¶ñ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ 'awaiting_amount' ‡¶∏‡ßç‡¶ü‡ßá‡¶ú‡ßá ‡¶•‡¶æ‡¶ï‡ßá
    @app.on_message(filters.text & filters.private & ~filters.regex("^(BKASH|NAGAD|CANCEL|Daily Bonus|Refer & Earn|WITHDRAW_NOW|My Account|History|Status \(Admin\)|TASK-\d+)$", flags=filters.re.IGNORECASE), group=group) 
    async def process_withdraw_amount(client: Client, message: Message):
        user_id = message.from_user.id
        
        if shared_user_state.get(user_id, {}).get('step') != 'awaiting_amount':
            return 
            
        try:
            amount = float(message.text)
        except ValueError:
            await message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
            return

        user_balance = shared_user_state[user_id]['balance']
        
        if amount < MIN_WITHDRAW:
            await message.reply_text(f"‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® **{MIN_WITHDRAW:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
            return
            
        if amount > user_balance:
            await message.reply_text(f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá **{user_balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶Ü‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§")
            return

        # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡ßà‡¶ß: ‡¶´‡ßÄ ‡¶ó‡¶£‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
        fee = amount * (WITHDRAW_FEE_PERCENT / 100)
        final_amount = amount - fee
        
        shared_user_state[user_id].update({
            'step': 'awaiting_method',
            'amount': amount,
            'fee': fee,
            'final_amount': final_amount
        })

        await message.reply_text(
            f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡¶®: **{amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**\n"
            f"üí∏ ‡¶´‡¶ø ({WITHDRAW_FEE_PERCENT:.0f}%): **{fee:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**\n"
            f"‚û°Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡¶æ‡¶¨‡ßá‡¶®: **{final_amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**\n\n"
            f"‡¶ï‡ßã‡¶® ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=withdraw_method_keyboard
        )

    # --- Handler 3: ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Æ‡ßá‡¶•‡¶° ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ---
    @app.on_message(filters.regex("^(BKASH|NAGAD)$", flags=filters.re.IGNORECASE) & filters.private, group=group)
    async def process_withdraw_method(client: Client, message: Message):
        user_id = message.from_user.id
        
        if shared_user_state.get(user_id, {}).get('step') != 'awaiting_method':
            return
            
        method = message.text.upper()
        
        shared_user_state[user_id]['step'] = 'awaiting_account'
        shared_user_state[user_id]['method'] = method

        await message.reply_text(
            f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø **{method}** ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n"
            f"üìû ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **{method} ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ü‡¶ø** ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("CANCEL")]
            ], resize_keyboard=True)
        )


    # --- Handler 4: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£ ---
    # ‡¶è‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ü‡¶ø‡¶ì ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ß‡¶∞‡ßá ‡¶Ø‡¶ñ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ 'awaiting_account' ‡¶∏‡ßç‡¶ü‡ßá‡¶ú‡ßá ‡¶•‡¶æ‡¶ï‡ßá
    @app.on_message(filters.text & filters.private & ~filters.regex("^(BKASH|NAGAD|CANCEL|Daily Bonus|Refer & Earn|WITHDRAW_NOW|My Account|History|Status \(Admin\)|TASK-\d+)$", flags=filters.re.IGNORECASE), group=group) 
    async def process_account_number(client: Client, message: Message):
        user_id = message.from_user.id
        
        if shared_user_state.get(user_id, {}).get('step') != 'awaiting_account':
            return
            
        account_number = message.text.strip()
        
        if not account_number.isdigit() or len(account_number) < 10 or len(account_number) > 15: # ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ö‡ßá‡¶ï
            await message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡ßß‡ß¶-‡ßß‡ß´ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ)‡•§")
            return
            
        state = shared_user_state[user_id]
        
        # ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶®: ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
        try:
            # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
            cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (state['amount'], user_id))
            
            # ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü withdrawals ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("""
                INSERT INTO withdrawals (user_id, amount, method, account_number, timestamp) 
                VALUES (?, ?, ?, ?, ?)
            """, (user_id, state['amount'], state['method'], account_number, current_time))
            
            conn.commit()
            
            # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
            admin_message = (
                f"üö® **NEW WITHDRAW REQUEST!** üö®\n"
                f"üë§ User ID: `{user_id}`\n"
                f"üè∑Ô∏è Username: @{message.from_user.username or 'N/A'}\n"
                f"üí∏ Amount: {state['amount']:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ\n"
                f"‚ûñ Fee: {state['fee']:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ\n"
                f"üí∞ Payout: {state['final_amount']:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ\n"
                f"üè¶ Method: {state['method']}\n"
                f"üî¢ Account: `{account_number}`"
            )
            await client.send_message(OWNER_ID, admin_message)

            # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
            new_balance = cursor.fetchone()[0]
            await message.reply_text(
                f"‚úÖ **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**\n\n"
                f"‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§\n"
                f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{new_balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**‡•§"
            )
            
        except Exception as e:
            await message.reply_text(f"‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {e}")
            
        finally:
            # ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
            if user_id in shared_user_state:
                del shared_user_state[user_id]

    # --- Handler 5: ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ (CANCEL) ---
    @app.on_message(filters.regex("CANCEL") & filters.private, group=group)
    async def withdraw_cancel(client: Client, message: Message):
        user_id = message.from_user.id
        
        if user_id in shared_user_state:
            del shared_user_state[user_id]
            await message.reply_text("‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        else:
            await message.reply_text("‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
