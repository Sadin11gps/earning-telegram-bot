import sqlite3
from pyrogram import Client, filters
from pyrogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import re # ‡¶∞‡ßá‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# --- Database & Global Setup ---
# bot.py ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# NOTE: USER_STATE, REFER_BONUS, MIN_WITHDRAW, REQUIRED_REFERRALS
# ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã bot.py ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡ßá‡•§ setup_withdraw_handlers ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá USER_STATE ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§

# ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ‡¶∞ ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶°
WITHDRAW_MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("BKASH"), KeyboardButton("NAGAD")],
        [KeyboardButton("CANCEL")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ‡¶∞ ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° (‡¶´‡ßá‡¶∞‡¶§ ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
MAIN_MENU_KEYBOARD_LITE = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üí∞ Daily Bonus"), KeyboardButton("üîó Refer & Earn")],
        [KeyboardButton("Withdraw"), KeyboardButton("üë§ My Account")],
        [KeyboardButton("üßæ History"), KeyboardButton("üëë Status (Admin)")]
    ],
    resize_keyboard=True
)


def get_user_data(user_id):
    """Fetches user balance and referral count."""
    cursor.execute("SELECT task_balance, referral_balance, referral_count FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    if data:
        task_balance, referral_balance, ref_count = data
        total_balance = task_balance + referral_balance
        return total_balance, ref_count
    return 0.00, 0

def update_user_balance_after_withdraw(user_id, amount):
    """Deducts the withdrawn amount from user's balances (pro-rata deduction)."""
    total_balance, _ = get_user_data(user_id)
    if amount > total_balance:
        return False # Should not happen if checked correctly before
        
    cursor.execute("SELECT task_balance, referral_balance FROM users WHERE user_id = ?", (user_id,))
    t_bal, r_bal = cursor.fetchone()

    # Calculate proportional deduction (‡¶∏‡¶∞‡¶≤‡ßÄ‡¶ï‡¶∞‡¶£)
    
    # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶ü‡ßÅ‡¶®
    deduct_from_referral = min(amount, r_bal)
    remaining_amount_to_deduct = amount - deduct_from_referral
    
    # ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ü‡¶æ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶ü‡ßÅ‡¶®
    deduct_from_task = min(remaining_amount_to_deduct, t_bal)

    new_r_bal = r_bal - deduct_from_referral
    new_t_bal = t_bal - deduct_from_task

    cursor.execute("UPDATE users SET task_balance = ?, referral_balance = ? WHERE user_id = ?", (new_t_bal, new_r_bal, user_id))
    conn.commit()
    return True


# --- Handler Setup Function ---
def setup_withdraw_handlers(app: Client, user_state_dict: dict, group=0):
    """Initializes all withdraw handlers and uses the shared USER_STATE dictionary."""
    
    # bot.py ‡¶•‡ßá‡¶ï‡ßá global variables ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ (‡¶∏‡ßá‡¶∞‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶∂‡ßÄ‡¶≤‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    # ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã bot.py-‡¶è ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤‡¶ø ‡¶Ü‡¶õ‡ßá, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡•§
    global USER_STATE # ‡¶Ø‡¶¶‡¶ø‡¶ì ‡¶è‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶õ‡ßá, ‡¶°‡¶ø‡¶ï‡ßç‡¶ü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á‡•§
    
    # ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã bot.py ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá (‡¶è‡¶á ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá NameError ‡¶π‡¶¨‡ßá)
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶á ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤‡ßá‡¶∞ ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ MIN_WITHDRAW, REQUIRED_REFERRALS ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá bot.py ‡¶è‡¶∞‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡•§
    # ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá, bot.py ‡¶•‡ßá‡¶ï‡ßá MIN_WITHDRAW ‡¶è‡¶¨‡¶Ç REQUIRED_REFERRALS ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã
    # ‡¶è‡¶á ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤‡ßá ‡¶°‡¶ø‡¶ï‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§
    # ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø bot.py-‡¶è‡¶∞ ‡¶ï‡ßã‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßã‡¶™‡ßá ‡¶Ü‡¶õ‡ßá‡•§
    # ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶ì ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá bot.py ‡¶è‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá hardcode ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§
    MIN_WITHDRAW = 1500.00
    REQUIRED_REFERRALS = 20
    OWNER_ID = 7702378694 # Admin ID
    WITHDRAW_FEE_PERCENT = 10.0
    
    
    # ----------------------------------------------------------------------
    # Handler 1: 'Withdraw' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï (‡¶´‡ßç‡¶≤‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ)
    # ----------------------------------------------------------------------
    @app.on_message(filters.regex("^Withdraw$") & filters.private, group=group)
    async def start_withdraw_flow(client, message):
        user_id = message.from_user.id
        total_balance, ref_count = get_user_data(user_id)
        
        # 1. ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
        if total_balance < MIN_WITHDRAW:
            await message.reply_text(f"‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ **{MIN_WITHDRAW:.2f} ‡ß≥** ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá: **{total_balance:.2f} ‡ß≥**")
            return

        if ref_count < REQUIRED_REFERRALS:
            await message.reply_text(f"‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ **{REQUIRED_REFERRALS} ‡¶ú‡¶® ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤** ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá: **{ref_count} ‡¶ú‡¶®**")
            return
            
        # 2. ‡¶´‡ßç‡¶≤‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
        user_state_dict[user_id] = {'step': 'SELECT_METHOD', 'amount': None, 'method': None, 'number': None}
        
        await message.reply_text(
            "‚úÖ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá **'CANCEL'** ‡¶ü‡¶ø‡¶™‡ßÅ‡¶®:",
            reply_markup=WITHDRAW_MENU_KEYBOARD
        )

    # ----------------------------------------------------------------------
    # Handler 2: 'CANCEL' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï (‡¶´‡ßç‡¶≤‡ßã ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤)
    # ----------------------------------------------------------------------
    @app.on_message(filters.regex("^CANCEL$") & filters.private, group=group)
    async def cancel_withdraw_flow(client, message):
        user_id = message.from_user.id
        if user_id in user_state_dict:
            del user_state_dict[user_id]
            
        await message.reply_text(
            "‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
            reply_markup=MAIN_MENU_KEYBOARD_LITE 
        )

    # ----------------------------------------------------------------------
    # Handler 3: BKASH/NAGAD ‡¶Æ‡ßá‡¶•‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®
    # ----------------------------------------------------------------------
    @app.on_message(filters.regex("^(BKASH|NAGAD)$") & filters.private, group=group)
    async def select_method(client, message):
        user_id = message.from_user.id
        method = message.text.upper()
        
        if user_id in user_state_dict and user_state_dict[user_id]['step'] == 'SELECT_METHOD':
            user_state_dict[user_id]['method'] = method
            user_state_dict[user_id]['step'] = 'ENTER_NUMBER'
            
            await message.reply_text(
                f"üè¶ ‡¶Ü‡¶™‡¶®‡¶ø **{method}** ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n"
                f"‚û°Ô∏è ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **{method} ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø** (‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®) ‡¶¶‡¶ø‡¶®:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("CANCEL")]], resize_keyboard=True, one_time_keyboard=True)
            )
        else:
            # ‡¶Ø‡¶¶‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶´‡ßç‡¶≤‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßá
            await message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá 'Withdraw' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶´‡ßç‡¶≤‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=MAIN_MENU_KEYBOARD_LITE)


    # ----------------------------------------------------------------------
    # Handler 4: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ì ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ
    # ----------------------------------------------------------------------
    @app.on_message(filters.private & filters.text & ~filters.regex("^(BKASH|NAGAD|Withdraw|CANCEL)$"), group=group)
    async def handle_withdraw_input(client, message):
        user_id = message.from_user.id
        
        if user_id not in user_state_dict:
            # ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø bot.py-‡¶è‡¶∞ ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶¨‡ßá
            return 
            
        current_state = user_state_dict[user_id]
        
        if current_state['step'] == 'ENTER_NUMBER':
            # ‡¶∏‡ßç‡¶ü‡ßá‡¶™ 2: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£
            account_number = message.text.strip()
            if not re.match(r'^\d{11,}$', account_number):
                await message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß‡ßß ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü):")
                return

            current_state['number'] = account_number
            current_state['step'] = 'ENTER_AMOUNT'
            
            total_balance, _ = get_user_data(user_id)
            
            await message.reply_text(
                f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{total_balance:.2f} ‡ß≥**\n"
                f"‚û°Ô∏è ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶∏‡ßá‡¶á **‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡¶ü‡¶ø** ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ {MIN_WITHDRAW:.2f} ‡ß≥):"
            )
            
        elif current_state['step'] == 'ENTER_AMOUNT':
            # ‡¶∏‡ßç‡¶ü‡ßá‡¶™ 3: ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ì ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶®
            try:
                amount_requested = float(message.text.strip())
            except ValueError:
                await message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
                return
            
            total_balance, ref_count = get_user_data(user_id)
            
            # ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®
            if amount_requested < MIN_WITHDRAW:
                await message.reply_text(f"‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü **{MIN_WITHDRAW:.2f} ‡ß≥** ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
                return

            if amount_requested > total_balance:
                await message.reply_text(f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á ({total_balance:.2f} ‡ß≥)‡•§ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
                return
            
            # ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶´‡ßÄ ‡¶ì ‡¶®‡ßá‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ó‡¶£‡¶®‡¶æ
            fee_amount = (amount_requested * WITHDRAW_FEE_PERCENT) / 100
            net_amount = amount_requested - fee_amount
            
            # ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
            if not update_user_balance_after_withdraw(user_id, amount_requested):
                 # ‡¶è‡¶ü‡¶æ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶®‡¶æ
                 await message.reply_text("‚ùå ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡•§")
                 del user_state_dict[user_id]
                 return
                 
            # ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶ü‡ßá‡¶¨‡¶≤‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ
            cursor.execute("""
                INSERT INTO withdraw_history (user_id, amount, method, account_number, status) 
                VALUES (?, ?, ?, ?, ?)
            """, (user_id, amount_requested, current_state['method'], current_state['number'], 'Pending'))
            conn.commit()

            # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
            admin_notification = (
                f"üö® **‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü** üö®\n"
                f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: `{user_id}`\n"
                f"üí∏ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü: **{amount_requested:.2f} ‡ß≥**\n"
                f"üìâ ‡¶´‡ßÄ ({WITHDRAW_FEE_PERCENT}%): **{fee_amount:.2f} ‡ß≥**\n"
                f"‚úÖ ‡¶®‡ßá‡¶ü ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü: **{net_amount:.2f} ‡ß≥**\n"
                f"üè¶ ‡¶Æ‡ßá‡¶•‡¶°: **{current_state['method']}**\n"
                f"üî¢ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü: `{current_state['number']}`\n"
            )
            await client.send_message(OWNER_ID, admin_notification)
            
            # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
            await message.reply_text(
                f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n"
                f"üí∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡¶ï‡ßÉ‡¶§: **{amount_requested:.2f} ‡ß≥**\n"
                f"üí∏ ‡¶´‡ßÄ: **{fee_amount:.2f} ‡ß≥**\n"
                f"üöÄ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡¶æ‡¶¨‡ßá‡¶®: **{net_amount:.2f} ‡ß≥**\n"
                f"‚è≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ß‡ßÄ‡¶® ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
                reply_markup=MAIN_MENU_KEYBOARD_LITE
            )
            
            # ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
            del user_state_dict[user_id]
            
        else:
            # ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá, ‡¶§‡¶æ‡¶ï‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
            await message.reply_text("‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶´‡ßç‡¶≤‡ßã‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=MAIN_MENU_KEYBOARD_LITE)


# ----------------------------------------------------------------------
# NOTE: ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø bot.py-‡¶è ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü:
# withdraw_mod.setup_withdraw_handlers(app, USER_STATE, group=-1) 
# ----------------------------------------------------------------------
